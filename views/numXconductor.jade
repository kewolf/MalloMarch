doctype html
html
    head
        title= "Conductor for NumX"
        meta(charset='utf-8')
        meta(name='viewport', content='width=device-width, initial-scale=1')

        script(src='/socket.io/socket.io.js')

        //these dependencies need to be in this specific order!
        link(rel='stylesheet', href='/stylesheets/themes/colors.min.css')
        link(rel='stylesheet', href='/stylesheets/themes/jquery.mobile.icons.min.css')
        link(rel='stylesheet', href='/javascripts/jquery/jquery.mobile.structure-1.4.5.min.css')
        link(rel='stylesheet', href='/stylesheets/jquerymobile.css')
        //link(rel='stylesheet' href='http://code.jquery.com/mobile/1.4.5/jquery.mobile.structure-1.4.5.min.css')
        script(src='/javascripts/jquery/jquery-1.12.4.js')
        script(src='/javascripts/jquery/jquery.mobile-1.4.5.min.js')
        script(src='/javascripts/Sly/sly.min.js')
        link(rel='stylesheet', href='/stylesheets/sly.css')

        script(src='/socket.io/socket.io.js')
        script(src='/javascripts/Logger/jsnlog.min.js')
        script(src='/javascripts/WebDrum/src/web-ahdsr.js')

        script(src='/javascripts/interfaceConstants.js')
        script(src='/javascripts/WebAudioInstruments/numXLoadAudioFiles.js')
        script(src='/javascripts/WebAudioInstruments/Metronome.js')
        script(src='/javascripts/MalloTools/TimeTools.js')
        script(src='/javascripts/object-watch.js')


    body(class="ui-mobile-viewport")

        script.
            var serverURL = 'http://localhost:3000';
            var isConsentFormOn;
            var isLoggerOn;
            var isMalloOn;
            var isSeqOn;

            var doneInitializing = false;

            var isMetroOn;
            var currentBPM = 120; //starting BPM
            var metronome;

            var startMeasure = -1;
            var currentMeasureOffset = -1;


            var nPlayers = 0; // we have 0 players (we are the conductor);

            var channelPresets = {};
            var nPresetChannels = 0;

            var audioContext;
            //var scheduler;
            var syncClient;
            var stayAwake;

            var isAudioSetup = false;
            var isSchedulerSetup = false;

            window.addEventListener('load', init, false);

            //socket to send/receive stuff from
            var socket = io(serverURL);

            socket.on('welcome', function (data) {
                currentInterface = parseInt(data.mode);
                isConsentFormOn = data.isConsentFormOn;
                isLoggerOn = data.isLoggerOn;
                isMalloOn = data.isMalloOn;
                isMetroOn = data.isMetroOn;
                isSeqOn = data.isSequencerOn;

                console.log("Welcome Mode: " + currentInterface + " logger " + isLoggerOn + " consentForm: " + isConsentFormOn + " seq: " + isSeqOn + " Mallo " + isMalloOn);

                $('#flipConsent').val(isConsentFormOn).flipswitch('refresh');  // consent form for audience
                $('#flipLogger').val(isLoggerOn).flipswitch('refresh');  // logger for audience
                $('#flipMetro').val(isMetroOn).flipswitch('refresh');  // metronome for performers
                $('#flipSequencer').val(isSeqOn).flipswitch('refresh'); // sequence for audience
                $('#flipMallo').val(isMalloOn).flipswitch('refresh'); // Mallos on/off for audience
                $('input[id="radio-choice-' + currentInterface + '"]').prop("checked", true).checkboxradio("refresh");

                setAndSendStartMeasure(startMeasure);

            });

            socket.on('time_res', function (data) {
                var receive_time = audioContext.currentTime;
                var instant_offset = data.serverTime / 1000.0 - (receive_time + data.clientTime) / 2;
                syncClient.addTimeOffset(instant_offset);
                // console.log("instant_offset: " + instant_offset + ", syncClient.getOffset(): " + syncClient.getOffset());
            });


            function init() {

            }

            $(document).ready(function () {
                $('#conductorInterface').hide();

            });

            // Setup an event listener for clicks on the choosePlayer button
            // This will initialize our audio context so that it works on ios.
            // Setup an event listener for clicks on the choosePlayer button
            // This will initialize our$("input[name='radio-choice-1']") audio context so that it works on ios.
            $(function () {
                $("#soundCheck").on("click", function () {

                    if (!isAudioSetup) {

                        try {
                            // Fix up for prefixing
                            if (isAudioContextSupported()) {
                                //console.log("Web Audio is supported!");
                                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                            }
                        } catch (e) {
                            $('#notSupported').show();
                            alert('You need webaudio support - try another browser or device');
                        }

                        setupMetronome(currentBPM, null);


                        loadAudioFiles(true); //true since we need metronome
                        playSound(audioContext.currentTime);


                        if (!isSchedulerSetup) {
                            initSyncAndScheduler(); // seq is not on.
                            loadJSONandDOM();
                            isSchedulerSetup = true;
                        }

                        isAudioSetup = true;

                    } else {
                        playSound(audioContext.currentTime);

                    }
                    $('#enableAudio').hide();
                    $('#conductorInterface').show();


                    doneInitializing = true;

                });
            });

            function isAudioContextSupported() {
                // This feature is still prefixed in Safari
                window.AudioContext = window.AudioContext || window.webkitAudioContext;
                return window.AudioContext;
            }

            function playSound(time) {
                //console.log("Play Sound");
                var beepGain = audioContext.createGain();
                var beepLevel = audioContext.createGain();
                beepLevel.gain.value = 0.4;
                var envelope = new WebAHDSR(audioContext, beepGain.gain);
                var oscillator = audioContext.createOscillator();
                oscillator.frequency.value = 400;
                oscillator.connect(beepGain);
                beepGain.connect(beepLevel);
                beepLevel.connect(audioContext.destination);
                envelope.on();
                oscillator.start(time);
                oscillator.stop(time + 0.5);    // you can set this to zero, but I left it here for testing.
            }


            function initSyncAndScheduler() {
                syncClient = new SyncClient();
                if (syncClient != undefined) {
                    console.log("syncClient is defined");
                    metronome.setSyncClient(syncClient);
                } else {
                    console.log("syncClient is undefined");
                }
                var timeSyncInterval = 500;
                // starts time sync
                setInterval(function () {
                    socket.emit('time_req', {
                        clientTime: audioContext.currentTime,
                    });
                }, timeSyncInterval);

                var schedulerInterval = 20;

                // checks scheduler
                /*
                 setInterval(function () {
                 scheduler.checkSchedule();
                 }, schedulerInterval);
                 */

                if (isMetroOn) {
                    switchMetronomeOn(true);
                }

                stayAwake = setInterval(function () {
                    //console.log("stay awake!");
                    location.href = location.href; //try refreshing
                    window.setTimeout(window.stop, 0); //stop it soon after
                }, 25000);
            }

            function switchMetronomeOn(isOn, bpm) {
                if (isOn) {
                    console.log("Metro make sound");
                    updateBPM(bpm);
                    metronome.start();
                } else {
                    console.log("Metro stop makein sound");
                    metronome.unwatch('curBeatNum');
                    metronome.unwatch('curMeasureNum');
                    metronome.stop();
                }
            }

            function loadJSONandDOM() {
                loadPresetsfile(function (response2) {
                    // Parse JSON string into object
                    var presetsJSON = JSON.parse(response2);
                    ch_index = 0;
                    for (var channel in presetsJSON) {
                        ch_index++;
                    }
                    nPresetChannels = ch_index;
                    loadDOMStuff();
                });
            }

            function loadPresetsfile(callback) {
                //console.log("load Presets File");
                var request = new XMLHttpRequest();
                request.open('GET', '/json/channels.json', true);
                request.onreadystatechange = function () {
                    if (request.readyState == 4 && request.status == "200") {
                        // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode
                        callback(request.responseText);
                    }
                };
                request.send(null);
            }



            /*
             Loads the DOM elements for audience channel slider
             */
            function loadDOMStuff() {
                //setup channels slider
                var $channels_frame = $('#channels');
                var $channels_wrap = $channels_frame.parent();

                var channels_options = {
                    horizontal: 1,
                    itemNav: 'forceCentered',
                    smart: 1,
                    activateMiddle: 1,
                    activateOn: 'click',
                    mouseDragging: 1,
                    touchDragging: 1,
                    releaseSwing: 1,
                    startAt: 0,
                    scrollBar: $channels_wrap.find('.scrollbar'),
                    scrollBy: 1,
                    speed: 200,
                    elasticBounds: 1,
                    easing: 'swing',
                    clickBar: 1
                };

                //create our sly for the channels box slider
                var sly_channels = new Sly('#channels', channels_options);

                //Setup event listener for when a new item has been activated
                //eventName: Event Name
                //itemIndex: index of active item.

                sly_channels.on('active', function (eventName, itemIndex) {
                    socket.emit('changeChannel', {
                        newChannel: itemIndex
                    });
                });

                //DO WE NEED TO LOG THESE EVENTS? OR WILL CLIENT LOG THEM?
                sly_channels.on('moveEnd', function (eventName) {
                    var el = document.querySelector(".active").id;
                    var ch_number = parseInt(el.slice(3));
                });

                sly_channels.init();

                console.log("Num of presets: " + nPresetChannels);

                for (var i = 0; i < nPresetChannels; i++) {
                    $('[id="ch_slidee"]').append('<li id = ' + 'ch_' + i + '>' + i + '</div>');
                }
                $('#channels').sly('reload');
                sly_channels.activate(0);
            }


            function saveEmails() {
                console.log("Send SaveEmail Message");
                socket.emit('saveEmails', {
                    from: "server"
                });
            }

            function setAndSendStartMeasure(measure) {
                startMeasure = measure;
                console.log("Send starting measure: " + measure);
                socket.emit('sendStartMeasure', {
                    startMeasure: measure
                });
            }


            /*
             Triggered when the set BPM button is clicked
             Used to set the BPM of the performer metronomes according to the #bpm HTML field
             */
            function setBPM() {
                currentBPM = $('#bpm').val();
                console.log("New BMP: " + currentBPM);
                metronome.setTempo(currentBPM);
                //TODO: emit socket message to update all performers with the new BPM

                socket.emit('updateTempo', {
                    newTempo: currentBPM
                });

            }


            function setupMetronome(tempo) {
                metronome = new Metronome(audioContext);
                metronome.setTempo(tempo);

                metronome.watch('curBeatNum', function (id, oldvalue, newvalue) {
                    //console.log('metronome.' + id + ' changed from ' + oldvalue + ' to ' + newvalue);
                    return newvalue;

                });
                metronome.watch('curMeasureNum', function (id, oldval, newval) {
                    //console.log('metronome.' + id + ' changed from ' + oldval + ' to ' + newval);
                    //$('#numbers').sly('activate', newvalue-1);

                    var measureNum = newval - startMeasure;

                    console.log("Current Interface: " + currentInterface);
                    //if we are on movement 1: trigger changes in the interfaces:
                    if ((currentInterface == 1) && (startMeasure != -1)) {
                        console.log("We are in Movement 1, Measure Num: " + newval + " Piece Measure Number: " + measureNum);

                        switch (measureNum) {
                            case -1:
                                //update params for the start of our piece:
                                updateParameter(0, 'pitch1', 200);
                                updateParameter(1, 'pitch1', 200);
                                updateParameter(2, 'pitch1', 200);
                                break;

                            case 0:
                                console.log("BEGINNING PIECE!");
                                break;

                            case 19:
                                console.log("MEASURE 19");
                                // P1 increase echo by .25
                                // P2 increase glimmer by .25
                                // P3 increase etheriality by .25
                                break;

                            case 24:
                                console.log("MEASURE 24");
                                // P1 increase echo by .25
                                // P2 increase glimmer by .25
                                // P3 increase etheriality by .25
                                break;

                            case 29:
                                console.log("MEASURE 29");
                                // P1 increase echo by .25
                                // P2 increase glimmer by .25
                                // P3 increase etheriality by .25
                                break;

                            case 34:
                                console.log("MEASURE 34");
                                // P1 increase echo by .25
                                // P2 increase glimmer by .25
                                // P3 increase etheriality by .25
                                break;

                            case 38:
                                console.log("MEASURE 38");
                                // P1 max etheriality
                                // P2 max etheriality
                                // P3 max etheriality
                                break;

                            case 59:
                                console.log("MEASURE 59");
                                // Slow Metronome
                                updateBPM(60);
                                break;

                            case 75:
                                console.log("DONE!");
                                stopPiece();
                                break;

                            default:
                                console.log("Nothing happening");
                        }

                    }

                    return newval;
                });

            }

            /*
             Sends an update message for a sound parameter to the server to pass on to all clients
             Performer is an int (0-2), param is the parameter string (lowercase), value is the new parameter value
             */
            function updateParameter(performer, param, value) {
                console.log("Update Player " + performer + " Parameter: " + param + " value: " + value);
                socket.emit('updateParameter', {
                    performerNum: performer,
                    parameter: param,
                    value: value
                });
            }


            /*
             Sets the tempo for the performer metronomes using a newBPM value
             */
            function updateBPM(newBPM) {
                $('#bpm').val = newBPM;
                setBPM();
            }


            /*
             Triggered when the "Begin Piece" button is clicked.
             Sends starting message to all performers

             */

            function beginPiece() {
                console.log("Begin!");

                setAndSendStartMeasure(metronome.curMeasureNum + 3);

                $('#begin').button('disable');
                $('#pause').button('enable');
                $('#stop').button('enable');
            }

            /*
             Used to pause the piece - i.e. keep track of what measure we are on
             TODO: send out a pause message to all performers?
             */
            function pausePiece() {

                console.log("Pause!");
                $('#begin').button('enable');


            }


            /*
             Used to stop the piece - doesn't keep track of where we are in the piece
             TODO: send out a stop message to all performers
             */
            function stopPiece() {
                console.log("Stop!");
                setAndSendStartMeasure(-1);

                $('#begin').button('enable');
                $('#pause').button('disable');
                $('#stop').button('disable');
            }


            //INTERFACE FUNCTIONS:

            $(document).ready(function () {
                $('#pause').button('disable');
                $('#stop').button('disable');

            });

            $(function () {
                $("input[name='radio-choice']").on("click", function () {
                    currentInterface = $("input[name='radio-choice']:checked").val();
                    console.log("Interface Selected Changed: " + currentInterface);
                    socket.emit('serverChangedInterface', {
                        newInterface: currentInterface
                    });
                });
            });


            $(function () {
                $('#flipLogger').change(function () {
                    if (doneInitializing) {
                        console.log("logger clicked: " + isLoggerOn);
                        // if it is on - send a message to turn it off
                        if (isLoggerOn) {
                            socket.emit('flipLogger', {loggerOn: 0});
                            isLoggerOn = 0;
                        } else {
                            socket.emit('flipLogger', {loggerOn: 1});
                            isLoggerOn = 1;
                        }
                    }
                });
            });

            $(function () {
                $('#flipConsent').change(function () {
                    if (doneInitializing) {
                        console.log("consent clicked " + isConsentFormOn);
                        // if it is on - send a message to turn it off
                        if (isConsentFormOn) {
                            socket.emit('flipConsentForm', {displayConsent: 0});
                            isConsentFormOn = 0;
                        } else {
                            socket.emit('flipConsentForm', {displayConsent: 1});
                            isConsentFormOn = 1;
                        }
                    }
                });
            });

            $(function () {
                $('#flipMetro').change(function () {
                    if (doneInitializing) {
                        console.log("metro clicked " + isMetroOn + " " + currentBPM);

                        // if it is on - send a message to turn it off
                        if (isMetroOn) {
                            socket.emit('flipMetro', {isOn: 0, bpm: currentBPM});
                            isMetroOn = 0;
                        } else {
                            socket.emit('flipMetro', {isOn: 1, bpm: currentBPM});
                            isMetroOn = 1;
                        }
                        switchMetronomeOn(isMetroOn, currentBPM);

                    }
                });
            });

            $(function () {
                $('#flipSequencer').change(function () {
                    if (doneInitializing) {
                        console.log("Seq clicked " + isSeqOn);
                        // if it is on - send a message to turn it off
                        if (isSeqOn) {
                            socket.emit('flipSeq', {isOn: 0});
                            isSeqOn = 0;
                        } else {
                            socket.emit('flipSeq', {isOn: 1});
                            isSeqOn = 1;
                        }
                    }
                });
            });

            $(function () {
                $('#flipMallo').change(function () {
                    if (doneInitializing) {
                        console.log("Mallo clicked " + isMalloOn);
                        // if it is on - send a message to turn it off
                        if (isMalloOn) {
                            socket.emit('flipMallo', {isOn: 0});
                            isMalloOn = 0;
                        } else {
                            socket.emit('flipMallo', {isOn: 1});
                            isMalloOn = 1;
                        }
                    }
                });
            });



            $(window).resize(function (e) {
                $('#channels').sly('reload');
            });



        #enableAudio.center.ui-content(data-role='main')
            .ui-block-a(style='width:10%')
            .ui-block-b(style='width:80%')
                div(style='margin: 10px 0 0 0;')
                    p
                        | Put in your headphones and click the button below.button
                        #soundCheck.ui-btn.ui-btn-inline.ui-shadow.ui-btn.ui-corner-all.ui-mini.center(type='button') Enable Audio and Check Sound

                div#audioSetup(style='margin: 10px 0 0 0;',)
                    p
                        | You must click the sound check button to enable the audio for this piece.

                div#notSupported(style='margin: 10px 0 0 0;',)
                    p.player2_color
                        | You need WebAudio support - try another browser or device

        #conductorInterface.center.ui-content(data-role='main')
            h1.center(data-role='header', data-theme='c', data-position='inline', role='banner') NumX Server Conductor
            .ui-body.ui-body-a.ui-corner-all
                .ui-block-a(style='width:10%')
                .ui-block-b(style='width:80%')
                    .ui-body.ui-body-a.ui-corner-all.center
                        .ui-block-a(style='width:25%')
                            label(for='flipConsent') Consent Form:
                            select#flipConsent(name='flipConsent', data-role='flipswitch', data-theme='b', data-track-theme='b')
                                option(value='0') Off
                                option(value='1') On
                        .ui-block-b(style='width:25%')
                            label(for='flipLogger') Logger:
                            select#flipLogger(name='flipLogger', data-role='flipswitch', data-theme='b', data-track-theme='b')
                                option(value='0') Off
                                option(value='1') On
                        .ui-block-c(style='width:25%')
                            label(for='flipSequencer') Sequencer:
                            select#flipSequencer(name='flipSequencer', data-role='flipswitch', data-theme='b', data-track-theme='b')
                                option(value='0') Off
                                option(value='1') On
                        .ui-block-d(style='width:25%')
                            label(for='flipMallo') MalLos:
                            select#flipMallo(name='flipMallo', data-role='flipswitch', data-theme='b', data-track-theme='b')
                                option(value='0') Off
                                option(value='1') On
                    .ui-body.ui-body-a.ui-corner-all.center
                        .ui-block-a(style='width:30%')
                            label(for='flipMetro') Metronome:
                            select#flipMetro(name='flipMetro', data-role='flipswitch', data-theme='c', data-track-theme='c')
                                option(value='0') Off
                                option(value='1') On
                        .ui-block-b(style='width:40%')
                            .ui-field-contain
                                label(for='bpm') BPM:
                                input#bpm(type='text', name='text-1', data-theme='c', value='120')
                        .ui-block-c(style='width:30%')
                            .ui-field-contain
                                button#bpmSet.ui-btn.ui-btn-inline.ui-shadow.ui-btn.ui-corner-all.ui-mini.ui-btn-c(name= 'bmpSet', type='submit', onclick="setBPM()") Set BPM
                    form
                        fieldset(data-role='controlgroup', data-theme='d' )
                            h2.center Interface Modes
                            input#radio-choice-0(type='radio', name='radio-choice', value='0')
                            label(for='radio-choice-0') Welcome
                            input#radio-choice-1(type='radio', name='radio-choice', value='1')
                            label(for='radio-choice-1') Movement 1
                            input#radio-choice-2(type='radio', name='radio-choice', value='2')
                            label(for='radio-choice-2') Intermission
                            input#radio-choice-3(type='radio', name='radio-choice', value='3')
                            label(for='radio-choice-3') Movement 2
                            input#radio-choice-4(type='radio', name='radio-choice', value='4')
                            label(for='radio-choice-4') Survey

                .ui-body.ui-body-a.ui-corner-all.center
                    .ui-content(role='main')
                        .ui-body.ui-body-a.ui-corner-all.center
                            .ui-block-a(style='width:30%')
                                form
                                    input#begin(type='submit', value='Begin Piece', data-theme='c', onclick="beginPiece()")
                            .ui-block-b(style='width:30%')
                                form
                                    input#pause(type='submit', value='Pause Piece', data-theme='c', onclick="pausePiece()")
                            .ui-block-c(style='width:30%')
                                form
                                    input#stop(type='submit', value='Stop Piece', data-theme='c', onclick="stopPiece()")



                .ui-body.ui-body-a.ui-corner-all.center

                    .form.wrap
                        label(for='channels') Audience Channel:
                        #ch_scrollbar.scrollbar
                            #channel_handle.handle(style='transform: translateZ(0px) translateX(228px);')
                        #channels.frame(style='overflow; hidden;')
                            ul#ch_slidee.slide
                .ui-field-contain
                    label(for='saveEmail')
                    button#saveEmail.ui-btn.ui-btn-inline.ui-shadow.ui-btn.ui-corner-all.ui-mini.ui-btn-b(name= 'saveEmail', type='submit', onclick="saveEmails()", ) Save Emails
            .ui-block-c(style='width:10%')

