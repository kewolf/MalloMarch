//
   Created by kewolf on 1/3/17.
    This is the player interface for the numX peice. The numXconductor controls the tempo of the metronomes, while
    numXaudience is the audience interface that will be


doctype html
html
    head
        title= "Player Interface"
        meta(charset='utf-8')
        meta(name='viewport', content='width=device-width, initial-scale=1')

        script(src='/socket.io/socket.io.js')

        //these dependencies need to be in this specific order!
        link(rel='stylesheet', href='/stylesheets/themes/colors.min.css')
        link(rel='stylesheet', href='/stylesheets/themes/jquery.mobile.icons.min.css')
        link(rel='stylesheet', href='/javascripts/jquery/jquery.mobile.structure-1.4.5.min.css')
        link(rel='stylesheet', href='/stylesheets/jquerymobile.css')
        //link(rel='stylesheet' href='http://code.jquery.com/mobile/1.4.5/jquery.mobile.structure-1.4.5.min.css')
        script(src='/javascripts/jquery/jquery-1.12.4.js')
        script(src='/javascripts/jquery/jquery.mobile-1.4.5.min.js')
        script(type='text/javascript', src='/javascripts/WebDrum/src/web-noise.js')
        script(type='text/javascript', src='/javascripts/WebDrum/src/web-ahdsr.js')
        script(type='text/javascript', src='/javascripts/WebDrum/src/web-drum.js')
        script(src='/javascripts/Sly/sly.min.js')
        link(rel='stylesheet', href='/stylesheets/sly.css')

        script(src='/socket.io/socket.io.js')
        script(src='/javascripts/Logger/jsnlog.min.js')
        script(src='/javascripts/interfaceConstants.js')
        script(src='/javascripts/WebDrum/src/web-ahdsr.js')
        script(src='/javascripts/WebAudioInstruments/numXPlayer.js')
        script(src='/javascripts/WebAudioInstruments/numXVoice.js')
        script(src='/javascripts/WebAudioInstruments/numXLoadAudioFiles.js')
        script(src='/javascripts/WebAudioInstruments/numXMetronome.js')
        script(src='/javascripts/MalloTools/TimeTools.js')
        script(src='/javascripts/ourJsonFilesParser.js')
        script(src='/javascripts/object-watch.js')



    body(class="ui-mobile-viewport")
        script.

            var customIPflag = 0;
            var serverURL = 'http://localhost:3000';
            var customServerURL = '192.168.1.9:3000';

            if (customIPflag) {
                serverURL = customServerURL;
            }

            window.addEventListener('load', init, false);
            //socket to send/receive stuff from
            var socket = io(serverURL);

            var amIperformer = 1;
            var isSeqOn;

            var nPlayers = 3;
            var players = [];

            var isMetroOn;
            var isMalloOn;

            var thisPerformerNum = -1; // once the player selects their number this will be 1, 2, or 3
            var isAudioSetup = false;
            var isSchedulerSetup = false;

            var performanceNumbers = ["314159265358979323846264338327950288  4197169399375105820974944592307816406", "     2718281828459045235360287471352   662497757247093699959574966967627724", "          16180339887498948482045868    34365638117720309179805762862135448"];
            var nNumbers; //the number of numbers to display, assigned once the performance number is chosen.
            var nBeats = 8; //number of beats in a measure

            var startMeasure = -1;
            var hasPieceStarted = false;
            var beatsUntilStart = -1; //used to keep track of the number of beats until the piece starts


            var audioContext;
            var scheduler;
            var syncClient;
            var stayAwake;

            //sequencer - used to play sounds at a specific interval
            // NOT Synchronized
            var sequencerID = 0;
            var tutorialSequencer = 0;

            //metronome - used to play sounds at a specific interval
            // ALL Metronomes are synchronized with each other at the currentBPM
            var metronome;
            var currentBPM;

            //create the logger
            var logger = JL("Performer-Logger");


            socket.on('welcome', function (data) {
                console.log("Welcome!");


                isMetroOn = data.isMetroOn;
                currentBPM = data.bpm;
                console.log("Is Metro on? " + data.isMetroOn + " " + data.bpm);

                isMalloOn = data.isMalloOn;
                console.log("Is MalLo on? " + data.isMalloOn);

                isSeqOn = data.isSequencerOn;
                console.log("Is MalLo on? " + data.isSequencerOn);

                startMeasure = data.startMeasure;
                console.log("Starting Measure: " + data.startMeasure);


                // IF the starting measure is set, then set the flag, and update the label
                if (startMeasure >= 0) {
                    hasPieceStarted = true;
                    var span1 = document.getElementById("countdownLabel");
                    span1.innerHTML = "Measure Number: ";
                    $('#countdownDiv').show();
                }

                console.log("IPS: " + data.performerIPs);
                for (ip in data.performerIPs) {
                    console.log("IP: " + ip);
                    console.log("performerPI[ip]: " + data.performerIPs[ip]);
                    var performerNum = Number(ip) + 1;
                    var ipStr = data.performerIPs[ip]
                    if (!ipStr) {
                        $('#p' + performerNum + 'ButtonDiv').show();
                    }
                }
            });


            socket.on('performerSelected', function (data) {
                var performerNum = data.performerNumber;
                console.log("Performer " + performerNum + " Chosen");
                $('#p' + performerNum + 'ButtonDiv').hide();
                if (thisPerformerNum == -1) {
                    window.location.reload();
                }
            });


            socket.on('performerUnselected', function (data) {
                var performerNum = data.performerNumber;
                console.log("Performer " + performerNum + " UnChosen");
                $('#p' + performerNum + 'ButtonDiv').show();
                if (thisPerformerNum == -1) {
                    window.location.reload();
                }
            });

            socket.on('startingMeasure', function (data) {
                if (metronome) {
                    startMeasure = data.startMeasure;
                    //Trigger the piece countdown
                    if (startMeasure != -1) {
                        $('#countdownDiv').show();
                        var measureUntilStart = startMeasure - metronome.curMeasureNum - 1;
                        beatsUntilStart = (nBeats - metronome.curBeatNum) + (measureUntilStart * nBeats);
                        console.log("Countdown: " + beatsUntilStart);
                        var span = document.getElementById("countdown");
                        span.innerHTML = beatsUntilStart.toString();
                        console.log("Start Measure: " + data.startMeasure + " with beats: " + beatsUntilStart);
                        //TODO: LOG PIECE START!
                    } else {
                        resetPiece();
                    }
                }

            });

            //receive messages from conductor on when to turn on/off the metronome
            socket.on('flipMetro', function (data) {
                console.log("Message from conductor, turn metronome: " + data.isOn);
                switchMetronomeOn(data.isOn, data.bpm);
            });

            socket.on('flipSeq', function (data) {
                console.log("Message from conductor, turn sequencer: " + data.isOn);
                switchSequencerOn(data.isOn);
            });

            //receive messages from conductor on when to turn on/off the mallos
            socket.on('flipMallo', function (data) {
                console.log("Message from conductor, turn mallos: " + data.isOn);
                switchMalloOn(data.isOn);
            });

            //receive message from conductor when to update the metronome
            socket.on('updateMetro', function (data) {
                console.log("Update Tempo: " + data.newTempo);
                updateMetro(data.newTempo);
            });

            socket.on('updatePlayerParameter', function (data) {
                //console.log("Update Player " + data.performerInterface + " Interface: " + data.performerNum + " Parameter: " + data.parameter + " Value: " + data.value);
                var playerInter = data.performerInterface;
                if (playerInter == thisPerformerNum) {
                    var playerNum = data.performerNum;
                    var param = data.parameter;
                    var value = data.value;
                    $('#m' + playerNum + '-' + param).val(value).trigger('change');
                }
            });

            socket.on('time_res', function (data) {
                var receive_time = audioContext.currentTime;
                var instant_offset = data.serverTime / 1000.0 - (receive_time + data.clientTime) / 2;
                syncClient.addTimeOffset(instant_offset);
                // console.log("instant_offset: " + instant_offset + ", syncClient.getOffset(): " + syncClient.getOffset());

            });

            //when we receive predictions, schedule them
            socket.on('note_prediction', function (data) {
                //console.log("Note Pediction: " + data.msg_id);
                var offset = syncClient.getOffset();
                var instr;
                if (data.path == "/left") {
                    instr = 0;
                }
                else if (data.path == "/middle") {
                    instr = 1;
                }
                else if (data.path == "/right") {
                    instr = 2;
                }
                else {
                    console.log("Didn't recognize path: " + data.path);
                }

                // we divide by 1000 because the audio context works in ms
                var diff = data.predicted_time / 1000.0 - syncClient.getTime();
                scheduler.curPredictions[instr] = (data.predicted_time / 1000.0) - offset;
                scheduler.curIds[instr] = data.msg_id;
                scheduler.curParams[instr] = {velocity: data.velocity, x_pos: data.x_pos, y_pos: data.y_pos, z_pos: data.z_pos};

                if (Math.abs(diff) < 0.02) {
                    //console.log("RECV PRED Time: " + data.predicted_time / 1000.0 + " Global Time: " + syncClient.getTime());
                    //console.log("RECV TIME DIFF: " + diff);
                    //console.log("curPredictions[instr]: " + scheduler.curPredictions[instr] + ", audioContext.currentTime: " + audioContext.currentTime + ", diff: " + (scheduler.curPredictions[instr] - audioContext.currentTime));
                }
                logger.info("{ \"PREDI\" : " + data.predicted_time + ",\"msg_id\" : " + data.msg_id + ", \"path\" : " + instr + ", \"send_time\" : " + data.send_time + ", \"receive_time\" : " + syncClient.getTime() + ", \"velocity\" : " + data.velocity + ", \"x\" : " + data.x_pos + ", \"y\" : " + data.y_pos + ", \"z\" : " + data.z_pos + " }");
            });


            function init() {

            }


            // Load the initial display - hide all visuals
            $(document).ready(function () {
                $('#playerInterface').hide();
                $('#enableAudio').hide();
                $('#notSupported').hide();

                $('#p1ButtonDiv').hide();
                $('#p2ButtonDiv').hide();
                $('#p3ButtonDiv').hide();

                $('#p1head').hide();
                $('#p2head').hide();
                $('#p3head').hide();

                $('#countdownDiv').hide();

                $('#m0-el-size-l').hide();
                $('#m0-el-size-r').hide();
                $('#m1-el-size-l').hide();
                $('#m1-el-size-r').hide();
                $('#m2-el-size-l').hide();
                $('#m2-el-size-r').hide();

            });

            //number will be 1, 2, or 3
            function choosePlayer(number) {
                thisPerformerNum = number;
                console.log("Player " + number + " Click!");
                $('#playerChoice').hide();
                $('#enableAudio').show();
                $('#p' + number + 'head').show();

                nNumbers = performanceNumbers[number - 1].length;

                //Send Message to Server to let them know which performer was selected:
                socket.emit('performerSetup', {
                    performerNumber: number
                });

                initLogger();
            }

            function initLogger() {
                console.log("Init Logger");
                var appender = JL.createAjaxAppender("Appender");
                appender.setOptions({
                    "batchSize": 10 //the number of logs that are acquired before they get sent
                });
                logger.setOptions({
                    "appenders": [appender]
                });
                var dateTime = Date.now();
                //log for when the logger is started (when the performer selects their player
                logger.info("{ \"START\" : " + dateTime + ", \"global_time\" : NA }");


            }

            function logout() {
                //Send Message to Server to let them know which performer was deselected:
                socket.emit('performerTeardown', {
                    performerNumber: thisPerformerNum
                });
                //refresh the page
                clearInterval(stayAwake);
                window.location.reload();
            }

            function updateMetro(newTempo) {
                currentBPM = newTempo;
                if (metronome) {
                    console.log("Update Metro");
                    metronome.setTempo(currentBPM);
                }
            }

            function resetPiece() {
                $('#countdownDiv').hide();
                console.log("Reset Piece");
                hasPieceStarted = false;
                var span1 = document.getElementById("countdownLabel");
                span1.innerHTML = "Countdown Until Piece Starts:";
                $('#numbers').sly('activate', 0);
            }


            // Setup an event listener for clicks on the soundCheck button
            // This will initialize our audio context so that it works on ios.
            $(function () {
                $("#soundCheck").on("click", function () {

                    if (!isAudioSetup) {

                        try {
                            // Fix up for prefixing
                            if (isAudioContextSupported()) {
                                //console.log("Web Audio is supported!");
                                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                            }
                        } catch (e) {
                            $('#notSupported').show();
                            alert('You need webaudio support - try another browser or device');
                        }

                        for (var i = 0; i < nPlayers; i++) {
                            players.push(new Player());
                        }

                        loadAudioFiles(true); //true since we are a performer and need metronome
                        playSound(audioContext.currentTime);

                        setupMetronome(currentBPM);

                        if (!isSchedulerSetup) {
                            initSyncAndScheduler(); // seq is not on.
                            loadJSONandDOM();
                            isSchedulerSetup = true;
                        }

                        isAudioSetup = true;

                        logger.info("{ \"SELPL\" : " + thisPerformerNum + ", \"global_time\" : " + syncClient.getTime() + " }");

                        switchMetronomeOn(isMetroOn, currentBPM);

                        //Send Message to Server to let them know which performer was selected:
                        socket.emit('getPresetParameters', {
                            performerNumber: thisPerformerNum
                        });

                        setPanningParams();

                    } else {
                        playSound(audioContext.currentTime);

                    }
                    $('#enableAudio').hide();
                    $('#playerInterface').show();

                });
            });

            function isAudioContextSupported() {
                // This feature is still prefixed in Safari
                window.AudioContext = window.AudioContext || window.webkitAudioContext;
                return window.AudioContext;
            }



            function initSyncAndScheduler() {
                syncClient = new SyncClient();
                if (syncClient != undefined) {
                    console.log("syncClient is defined");
                    metronome.setSyncClient(syncClient);
                    scheduler = new Scheduler(players, audioContext, logger, syncClient);
                } else {
                    console.log("syncClient is undefined");
                }
                var timeSyncInterval = 500;
                // starts time sync
                setInterval(function () {
                    socket.emit('time_req', {
                        clientTime: audioContext.currentTime,
                    });
                }, timeSyncInterval);

                var schedulerInterval = 20;

                // checks scheduler
                setInterval(function () {
                    //players[0].schedule(audioContext.currentTime+.5);
                    scheduler.checkSchedule();
                }, schedulerInterval);

                if (isSeqOn) {
                    switchSequencerOn(true);
                }

                stayAwake = setInterval(function () {
                    //console.log("stay awake!");
                    location.href = location.href; //try refreshing
                    window.setTimeout(window.stop, 0); //stop it soon after
                }, 25000);


            }

            // Setup our metronome and determine if the piece has started
            function setupMetronome(tempo) {
                metronome = new Metronome(audioContext, logger);
                //metronome.setTempo(tempo);

                metronome.watch('curBeatNum', function (id, oldvalue, newvalue) {
                    //console.log('metronome.' + id + ' changed from ' + oldvalue + ' to ' + newvalue);
                    $('#beats').sly('activate', newvalue - 1);
                    if (hasPieceStarted == false) {
                        console.log("Countdown: " + beatsUntilStart);
                        var span_beat = document.getElementById("countdown");
                        span_beat.innerHTML = beatsUntilStart.toString();
                        beatsUntilStart--;
                        console.log("Beats Until Start: " + beatsUntilStart);
                    }
                    return newvalue;

                });


                metronome.watch('curMeasureNum', function (id, oldval, newval) {
                    //console.log('metronome.' + id + ' changed from ' + oldval + ' to ' + newval);

                    var measureNum = newval - startMeasure;

                    console.log("NewVal - StartMeasure: " + measureNum + "new measure: " + newval + " start: " + startMeasure);
                    if ((hasPieceStarted == true) && (measureNum > 0)) {
                        $('#numbers').sly('activate', measureNum);
                        var span_measure = document.getElementById("countdown");
                        span_measure.innerHTML = measureNum.toString();
                    }

                    if (syncClient) {
                        logger.info("{ \"MEASR\" : " + newval + ", \"piece_measure_num\" : " + measureNum + ", \"global_time\" : " + syncClient.getTime() + "}");
                    }

                    // if this is our starting measure - update the interface to show measures and set the
                    //    hasPieceStarted flag to true

                    if (measureNum == 0) {

                        var span2 = document.getElementById("countdown");
                        span2.innerHTML = "0";

                        var span1 = document.getElementById("countdownLabel");
                        span1.innerHTML = "Measure Number:";

                        hasPieceStarted = true;
                    }

                    // if we reach the end of the piece, reset our hasPieceStarted flag, starting measure
                    //    and the interface
                    if (measureNum > nNumbers) {
                        resetPiece();
                    }

                    return newval;

                });

            }

            function switchSequencerOn(isOn) {
                logger.info("{ \"FLPSE\" : " + isOn + ", \"global_time\" : " + syncClient.getTime() + "}");
                if (isOn) {
                    sequencerID = setInterval(function () {
                        console.log('Timer, ' + tutorialSequencer);
                        if (tutorialSequencer == 0) {
                            scheduler.setPrediction(audioContext.currentTime + 0.01, 0);
                        } else if (tutorialSequencer == 1) {
                            scheduler.setPrediction(audioContext.currentTime + 0.01, 1);
                        } else if (tutorialSequencer == 2) {
                            scheduler.setPrediction(audioContext.currentTime + 0.01, 2);
                        } else if (tutorialSequencer == 3) {
                            //scheduler.setPrediction(audioContext.currentTime + 0.01, 0);
                            //scheduler.setPrediction(audioContext.currentTime + 0.01, 1);
                            //scheduler.setPrediction(audioContext.currentTime + 0.01, 2);
                        }
                        tutorialSequencer++;
                        if (tutorialSequencer == 4) {
                            tutorialSequencer = 0;
                        }
                    }, 500);
                } else {
                    clearInterval(sequencerID);
                }
            }

            function switchMetronomeOn(isOn, bpm) {
                if (isOn) {
                    // make sound
                    ///metronome.stop();
                    updateMetro(bpm);
                    metronome.start();
                    console.log("Start Measure: " + startMeasure + " Cur Measure: " + metronome.curMeasureNum);
                    //console.log("Metro make sound");

                } else {
                    //console.log("Metro stop makein sound");
                    //metronome.unwatch('curBeatNum');
                    //metronome.unwatch('curMeasureNum');
                    metronome.stop();
                }
            }

            function switchMalloOn(isOn) {
                logger.info("{ \"FLPMA\" : " + isOn + ", \"global_time\" : " + syncClient.getTime() + "}");
                isMalloOn = isOn;
            }

            function playSound(time) {
                //console.log("Play Sound");
                var beepGain = audioContext.createGain();
                var beepLevel = audioContext.createGain();
                beepLevel.gain.value = 0.4;
                var envelope = new WebAHDSR(audioContext, beepGain.gain);
                var oscillator = audioContext.createOscillator();
                oscillator.frequency.value = 400;
                oscillator.connect(beepGain);
                beepGain.connect(beepLevel);
                beepLevel.connect(audioContext.destination);
                envelope.on();
                oscillator.start(time);
                oscillator.stop(time + 0.5);    // you can set this to zero, but I left it here for testing.
            }

            //Sets the panning for the particular player
            function setPanningParams() {
                console.log("Set Panning!");

                if (thisPerformerNum == 1) {
                    // Between -1 (left) and 1 (right
                    players[0].setPanPosition(0); // me
                    players[1].setPanPosition(-0.3);
                    players[2].setPanPosition(-0.75);
                } else if (thisPerformerNum == 2) {
                    players[0].setPanPosition(0.4);
                    players[1].setPanPosition(0); // me
                    players[2].setPanPosition(-0.4);

                } else if (thisPerformerNum == 3) {
                    players[0].setPanPosition(0.75);
                    players[1].setPanPosition(0.3);
                    players[2].setPanPosition(0); // me

                }
            }

            // Have the JSON and DOM loaded in such an asynchronous sequence with a series of callbacks
            // when files have finished loaded.
            // These functions are all located in the ourJsonFilesParser.js file
            function loadJSONandDOM() {
                loadInstrumentsfile(function (response1) {
                    parseInstruments(response1);

                    loadPresetsfile(function (response2) {
                        // Parse JSON string into object
                        parseChannels(response2);
                        loadDOMStuff();
                    });
                });
            }


            function loadDOMStuff() {
                //setup Numbers slider
                var $numbers_frame = $('#numbers');
                var $numbers_wrap = $numbers_frame.parent();

                var numbers_options = {
                    horizontal: 1,
                    itemNav: 'forceCentered',
                    smart: 1,
                    activateMiddle: 1,
                    activateOn: 'click', //'click',
                    mouseDragging: 0,
                    touchDragging: 0,
                    releaseSwing: 1,
                    startAt: 0,
                    scrollBar: $numbers_wrap.find('.scrollbar'),
                    clickBar: false,
                    scrollBy: 1,
                    speed: 200,
                    elasticBounds: 1,
                    easing: 'swing'
                };

                //create our sly for the channels box slider
                var sly_numbers = new Sly('#numbers', numbers_options);

                //Setup event listener for when a new item has been activated
                //eventName: Event Name
                //itemIndex: index of active item.

                sly_numbers.on('active', function (eventName, itemIndex) {
                    socket.emit('changeNumber', {
                        newNumber: itemIndex
                    });
                });

                // This function is called when the numbers slider moves.
                // We want to log the number of notes they should be playing on that measure.
                sly_numbers.on('moveEnd', function (eventName) {
                    var el = document.querySelector(".active").id;
                    var number = parseInt(el.slice(3));
                    logger.info("{ \"SCORE\" : " + thisPerformerNum + ", \"measure\" : " + metronome.curMeasureNum + ", \"score_beats:\" : " + number + ", \"global_time\" : " + syncClient.getTime() + "}");
                });

                sly_numbers.init();


                console.log("Num of presets: " + nNumbers);

                var numbersToShow = performanceNumbers[thisPerformerNum - 1];
                console.log("TO SHOW: " + numbersToShow);
                console.log("LENGTH: " + numbersToShow.length);

                for (var i = 0; i < nNumbers; i++) {
                    var num = numbersToShow.charAt(i);
                    $('[id="num_slidee"]').append('<li id = ' + 'num_' + i + '>' + num + '</div>');
                }

                $('#numbers').sly('reload');
                sly_numbers.activate(0);


                //setup BEATS slider
                var $beats_frame = $('#beats');
                var $beats_wrap = $beats_frame.parent();

                var beats_options = {
                    horizontal: 0,
                    itemNav: 'basic',
                    smart: 1,
                    activateMiddle: 1,
                    activateOn: null
                };

                //create our sly for the channels box slider
                var sly_beats = new Sly('#beats', beats_options);

                //Setup event listener for when a new item has been activated
                //eventName: Event Name
                //itemIndex: index of active item.

                sly_beats.on('active', function (eventName, itemIndex) {
                    socket.emit('changeBeats', {
                        newBeat: itemIndex
                    });
                });

                //DO WE NEED TO LOG THESE EVENTS? OR WILL CLIENT LOG THEM?
                sly_beats.on('moveEnd', function (eventName) {
                    var el = document.querySelector(".active").id;
                    var beat = parseInt(el.slice(3));
                });

                sly_beats.init();


                console.log("Num of presets: " + nBeats);

                for (var i = 0; i < nBeats; i++) {
                    var num = i + 1;
                    $('[id="beats_slidee"]').append('<li id = ' + 'beat_' + i + '>' + num + '</div>');
                }

                $('#beats').sly('reload');
                sly_beats.activate(0);


                refreshSliders();
            }



            //NUMX CODE:

            //gets parameters from the players and sets
            function refreshSliders() {
                for (var i = 0; i < nPlayers; i++) {
                    params = players[i].getParameters();

                    console.log("REFRESH: " + i + " " + params);

                    $('#m' + i + '-volume').val(players[i].volume).trigger('change');
                    $('#m' + i + '-pitch1').val(players[i].pitch1).trigger('change');
                    $('#m' + i + '-pitch2').val(players[i].pitch2).trigger('change');
                    $('#m' + i + '-pitch3').val(players[i].pitch3).trigger('change');
                    $('#m' + i + '-echo').val(players[i].echo).trigger('change');
                    $('#m' + i + '-ethereality').val(players[i].ethereality).trigger('change');
                    $('#m' + i + '-glimmer').val(players[i].glimmer).trigger('change');
                    $('#m' + i + '-shift').val(players[i].shift).trigger('change');

                }
            }


            //slider changes!
            $(function () {
                $(".ui-slider").on('change', function (event) {
                    var id = event.target.id;
                    var playerNumber = parseInt(id.slice(1));
                    var value = $(this).text();
                    console.log("Slider Changes: " + event.target.id + " " + playerNumber + " " + value);
                    if (id.indexOf("volume") > -1) {
                        players[playerNumber].setVolume(value);
                    } else if (id.indexOf("pitch1") > -1) {
                        players[playerNumber].setPitch1(value);
                    } else if (id.indexOf("pitch2") > -1) {
                        players[playerNumber].setPitch2(value);
                    } else if (id.indexOf("pitch3") > -1) {
                        players[playerNumber].setPitch3(value);
                    } else if (id.indexOf("echo") > -1) {
                        players[playerNumber].setEcho(value);
                    } else if (id.indexOf("ethereality") > -1) {
                        players[playerNumber].setEthereality(value);
                    } else if (id.indexOf("glimmer") > -1) {
                        players[playerNumber].setGlimmer(value);
                    } else if (id.indexOf("shift") > -1) {
                        players[playerNumber].setShift(value);
                    }
                });
            });

            //log when sliders stop (either by clicking, dragging, or selecting the handle
            $(function () {
                $(".ui-slider").on('slidestop', function (event) {
                    var id = event.target.id;
                    var idStr = id.substring(3);
                    console.log("UPDATE PARAM: " + idStr);
                    var playerNumber = parseInt(id.slice(1));
                    logger.info("{ \"PARAM\" : " + playerNumber + ", \"" + idStr + "\" : " + event.target.value + ", \"global_time\" : " + syncClient.getTime() + "}");

                });
            });

            $(function () {
                $('#saveButton').click(function () {
                    var str = JSON.stringify($('#m-form').serializeObject());
                    console.log("Save");
                    var dateTime = Date.now();
                    var params = {};
                    for (var i = 0; i < nPlayers; i++) {
                        params[i] = players[i].getParameters();
                    }

                    var str = JSON.stringify(params);
                    console.log(str);

                    // Add string to the result element
                    //$('#result').text(str);

                    socket.emit('saveJSON', {
                        type: "params",
                        str: str,
                        dateTime: dateTime
                    });

                    logger.info("{ \"SAVEP\" : " + dateTime + ", \"global_time\" : " + syncClient.getTime() + "}");

                    return false;
                });
            });

            $.fn.serializeObject = function () {
                var o = {};
                var a = this.serializeArray();
                $.each(a, function () {
                    if (o[this.name] !== undefined) {
                        if (!o[this.name].push) {
                            o[this.name] = [o[this.name]];
                        }
                        o[this.name].push(this.value || '');
                    } else {
                        o[this.name] = this.value || '';
                    }
                });
                return o;
            };

            $(window).resize(function (e) {
                $('#beats').sly('reload');
                $('#numbers').sly('reload');
            });



        #playerChoice.center.ui-content(data-role='main')
            h1.center(data-role='header', data-theme='a', data-position='inline', role='banner') Choose which player you are:
            .ui-body.ui-body-a.ui-corner-all
                .ui-block-a(style='width:10%')
                .ui-block-b(style='width:80%')
                    form#buttonForm
                        div#p1ButtonDiv
                            input#p1Button(type='button', data-inline='true', data-theme='b', value='Player 1', onclick='choosePlayer(1)')
                        div#p2ButtonDiv
                            input#p2Button(type='button', data-inline='true', data-theme='c', value='Player 2', onclick='choosePlayer(2)')
                        div#p3ButtonDiv
                            input#p3Button(type='button', data-inline='true', data-theme='d', value='Player 3', onclick='choosePlayer(3)')
        #enableAudio.center.ui-content(data-role='main')
            .ui-block-a(style='width:10%')
            .ui-block-b(style='width:80%')
                div(style='margin: 10px 0 0 0;')
                    p
                        | Put in your headphones and click the button below.button
                        #soundCheck.ui-btn.ui-btn-inline.ui-shadow.ui-btn.ui-corner-all.ui-mini.center(type='button') Enable Audio and Check Sound

                div#audioSetup(style='margin: 10px 0 0 0;',)
                    p
                        | You must click the sound check button to enable the audio for this piece.

                div#notSupported(style='margin: 10px 0 0 0;',)
                    p.player2_color
                        | You need WebAudio support - try another browser or device

        #playerInterface.center.ui-content(data-role='main')

            h1#p1head.center(data-role='header', data-theme='b', data-position='inline', role='banner') Player 1 Interface

            h1#p2head.center(data-role='header', data-theme='c', data-position='inline', role='banner') Player 2 Interface

            h1#p3head.center(data-role='header', data-theme='d', data-position='inline', role='banner') Player 3 Interface
            .ui-body.ui-body-a.ui-corner-all
                .ui-block-a(style='width:10%')
                .ui-block-b(style='width:80%')
                    #countdownDiv.ui-field-contain
                        p#countdownLabel Countdown Until Piece Starts:
                        p#countdown 0
                .ui-block-c(style='width:10%')
                    button#logoutButton.ui-btn.ui-btn-inline.ui-shadow.ui-btn.ui-corner-all.ui-mini.ui-btn-c(name='logout', type='submit', onclick='logout()') Logout


            .ui-body.ui-body-a.ui-corner-all
                .ui-block-a(style='width:10%')
                    .form.wrap
                        label(for='beats')
                        #beats.beats_frame(style='overflow; hidden;')
                            ul#beats_slidee.slide
                .ui-block-b(style='width:5%')
                .ui-block-c(style='width:80%')
                    .form.wrap
                        label(for='numbers') Number of notes to play per measure:
                        #num_scrollbar.scrollbar
                            #numbers_handle.handle(style='transform: translateZ(0px) translateX(228px);')
                        #numbers.perf_frame(style='overflow; hidden;')
                            ul#num_slidee.slide

            #playerSelectors.ui-content(data-role='main')
                form#m-form
                    #m0-form.pop_countryBox(data-role='collapsible', data-inset='false', data-theme='b')
                        h3 Player 1
                        .ui-content
                            label.leftItem(for='m0-pitch1') Pitch 1
                            .rightItem
                                input#m0-pitch1(type='range', name='m0-pitch1', data-track-theme='b', data-theme='b', min='150', max='1000', value='500', step='1', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m0-pitch2') Pitch 2
                            .rightItem
                                input#m0-pitch2(type='range', name='m0-pitch2', data-track-theme='b', data-theme='b', min='150', max='1000', value='490', step='1', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m0-pitch3') Pitch 3
                            .rightItem
                                input#m0-pitch3(type='range', name='m0-pitch3', data-track-theme='b', data-theme='b', min='150', max='1000', value='510', step='1', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m0-echo') Echo
                            .rightItem
                                input#m0-echo(type='range', name='m0-echo', data-track-theme='b', data-theme='b', min='0', max='100', value='50', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m0-ethereality') Ethereality
                            .rightItem
                                input#m0-ethereality(type='range', name='m0-ethereality', data-track-theme='b', data-theme='b', min='0', max='100', value='50', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m0-glimmer') Glimmer
                            .rightItem
                                input#m0-glimmer(type='range', name='m0-glimmer', data-track-theme='b', data-theme='b', min='0', max='100', value='50', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m0-shift') Shift
                            .rightItem
                                input#m0-shift(type='range', name='m0-shift', data-track-theme='b', data-theme='b', min='0', max='100', value='50', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m0-volume') Volume
                            .rightItem
                                input#m0-volume(type='range', name='m0-volume', data-track-theme='b', data-theme='b', min='0', max='1', value='0.25', step='.01', data-popup-enabled='true', data-mini='true')


                    #m1-form.pop_countryBox(data-role='collapsible', data-inset='false', data-theme='c')
                        h3 Player 2
                        .ui-content
                            label.leftItem(for='m1-pitch1') Pitch 1
                            .rightItem
                                input#m1-pitch1(type='range', name='m1-pitch1', data-track-theme='c', data-theme='c', min='150', max='1000', value='500', step='1', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m1-pitch2') Pitch 2
                            .rightItem
                                input#m1-pitch2(type='range', name='m1-pitch2', data-track-theme='c', data-theme='c', min='150', max='1000', value='490', step='1', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m1-pitch3') Pitch 3
                            .rightItem
                                input#m1-pitch3(type='range', name='m1-pitch3', data-track-theme='c', data-theme='c', min='150', max='1000', value='510', step='1', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m1-echo') Echo
                            .rightItem
                                input#m1-echo(type='range', name='m1-echo', data-track-theme='c', data-theme='c', min='0', max='100', value='50', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m1-ethereality') Ethereality
                            .rightItem
                                input#m1-ethereality(type='range', name='m1-ethereality', data-track-theme='c', data-theme='c', min='0', max='100', value='50', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m1-glimmer') Glimmer
                            .rightItem
                                input#m1-glimmer(type='range', name='m1-glimmer', data-track-theme='c', data-theme='c', min='0', max='100', value='50', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m1-shift') Shift
                            .rightItem
                                input#m1-shift(type='range', name='m1-shift', data-track-theme='c', data-theme='c', min='0', max='100', value='50', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m1-volume') Volume
                            .rightItem
                                input#m1-volume(type='range', name='m1-volume', data-track-theme='c', data-theme='c', min='0', max='1', value='0.25', step='.01', data-popup-enabled='true', data-mini='true')

                    #m2-form.pop_countryBox(data-role='collapsible', data-inset='false', data-theme='d')
                        h3 Player 3
                        .ui-content
                            label.leftItem(for='m2-pitch1') Pitch 1
                            .rightItem
                                input#m2-pitch1(type='range', name='m2-pitch1', data-track-theme='d', data-theme='d', min='150', max='1000', value='500', step='1', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m2-pitch2') Pitch 2
                            .rightItem
                                input#m2-pitch2(type='range', name='m2-pitch2', data-track-theme='d', data-theme='d', min='150', max='1000', value='490', step='1', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m2-pitch3') Pitch 3
                            .rightItem
                                input#m2-pitch3(type='range', name='m2-pitch3', data-track-theme='d', data-theme='d', min='150', max='1000', value='510', step='1', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m2-echo') Echo
                            .rightItem
                                input#m2-echo(type='range', name='m2-echo', data-track-theme='d', data-theme='d', min='0', max='100', value='50', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m2-ethereality') Ethereality
                            .rightItem
                                input#m2-ethereality(type='range', name='m2-ethereality', data-track-theme='d', data-theme='d', min='0', max='100', value='50', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m2-glimmer') Glimmer
                            .rightItem
                                input#m2-glimmer(type='range', name='m2-glimmer', data-track-theme='d', data-theme='d', min='0', max='100', value='50', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m2-shift') Shift
                            .rightItem
                                input#m2-shift(type='range', name='m2-shift', data-track-theme='d', data-theme='d', min='0', max='100', value='50', data-popup-enabled='true', data-mini='true')

                            label.leftItem(for='m2-volume') Volume
                            .rightItem
                                input#m2-volume(type='range', name='m2-volume', data-track-theme='d', data-theme='d', min='0', max='1', value='0.25', step='.01', data-popup-enabled='true', data-mini='true')

                div#saveFooter(data-role='footer', role='banner', data-position='inline')
                    h1
                        .ui-grid-b
                            .ui-block-a(style='text-align: left;')
                            a#saveButton.ui-block-b.ui-btn-a.ui-btn.ui-corner-all.ui-shadow(data-role="button", style='text-align: center;', input type="submit") Save
                            .ui-block-c(style='text-align: right;')

            //TODO: Add a "logout" button for the performers that will send a "performerTeardown" message to the server.
