doctype html
html(lang='en')
    head
        meta(charset='UTF-8')
        title Version 1
        script(src='/socket.io/socket.io.js')
        script(type='text/javascript', src='/javascripts/WebDrum/src/web-noise.js')
        script(type='text/javascript', src='/javascripts/WebDrum/src/web-ahdsr.js')
        script(type='text/javascript', src='/javascripts/WebDrum/src/web-drum.js')
        script(type='text/javascript', src='/javascripts/Interface/build/interface.js')
        script.

            var audioContext;
            var initialVol = 0.5;
            var soundDuration = 0.05;
            var drums = [];
            var numDrums = 3;
            var freqArr = []; //array of frequencies

            //init sound stuff!
            window.addEventListener('load', init, false);

            //socket to send/receive stuff from
            var socket = io('http://localhost:3000');

            //
            socket.on('welcome', function (data) {
                addMessage(data.message, 0, 0);
                // Respond every second with a message including this clients' id sent (from server) and current time
                setInterval(function () {
                    var currentTime = audioContext.currentTime;
                    socket.emit('time_req', {clientTime: currentTime, id: data.id});
                }, 1000);
            });

            //when we receive a time response - do the time sync stuff
            socket.on('time_res', function (data) {
                //var currentTime = audioContext.currentTime;
                //DO CALCULATIONS
                //UPDATE KALMAN FILTER
                var text = data.message + " Server Time: " + data.serverTime + " client Time: " + data.clientTime;

                //add message to console
                addMessage(text, 0, 0);
            });


            //when we receive OSC infromation, make sound!
            socket.on('oscInfo', function (data) {
                var currentTime = audioContext.currentTime;
                var instr;
                if (data.address == "/left") {
                    instr = 1;
                }
                if (data.address == "/right") {
                    instr = 2;
                }
                var text = "Instrument " + instr + " at " + currentTime;
                addMessage(text, currentTime, instr);
            });

            socket.on('error', console.error.bind(console));

            //socket.on('message', console.log.bind(console));


            //Add message to the console if time > 0 then play sound for instrument for a duration
            function addMessage(message, time, instrument) {
                var text = document.createTextNode(message),
                        el = document.createElement('li'),
                        messages = document.getElementById('messages');
                el.appendChild(text);
                messages.appendChild(el);
                console.log(text);
                if (time > 0) {
                    playSound(time, soundDuration, instrument);
                }
            }

            //init the sound system
            function init() {
                console.log("in init");
                try {
                    // Fix up for prefixing
                    if (isAudioContextSupported()) {
                        console.log("It is supported!");
                        audioContext = new (window.AudioContext || window.webkitAudioContext)();
                        //audioContext.createGainNode(); //silly workaround to get sounds current time to start in safari.
                        for (var i = 1; i < 4; i++) {
                            freqArr[i] = 120 * i;
                        }
                        for (var j = 1; j < numDrums; j++) {
                            drums[j] = new WebDrum(audioContext);
                            drums[j].connect();
                        }
                    }
                } catch (e) {
                    alert('You need webaudio support - try another browser');
                }
            }

            function isAudioContextSupported() {
                // This feature is still prefixed in Safari
                window.AudioContext = window.AudioContext || window.webkitAudioContext;
                return window.AudioContext;
            }

            //play the sound by creating an oscillator
            function playSound(time, duration, instrument) {
                console.log("Play Time " + time + " for duration: " + duration + " on instrument: " + instrument);
                drums[instrument].trigger();
                /*
                var oscillator = audioContext.createOscillator();
                oscillator.connect(audioContext.destination); // Connect sound to speakers
                oscillator.frequency.value = freqArr[instrument];
                oscillator.start(time);
                oscillator.stop(time + duration);
                 */
            }

    body
        script.
            var a = new Interface.Panel();

            var b = new Interface.Button({
                bounds: [.05, .05, .3, .9],
                label: 'toggle'
            });
            var c = new Interface.Button({
                bounds: [.35, .05, .3, .9],
                label: 'momentary',
                mode: 'momentary'
            });
            var d = new Interface.Button({
                bounds: [.65, .05, .3, .9],
                label: 'contact',
                mode: 'contact'
            });

            a.background = 'black';
            a.add(b, c, d);

        h1  This is the index, is the sound working?
        ul#messages

