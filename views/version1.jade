extends layout

block content
    script(src='/socket.io/socket.io.js')
    script(type='text/javascript', src='/javascripts/WebDrum/src/web-noise.js')
    script(type='text/javascript', src='/javascripts/WebDrum/src/web-ahdsr.js')
    script(type='text/javascript', src='/javascripts/WebDrum/src/web-drum.js')
    script(src='/javascripts/Sly/sly.min.js')
    link(rel='stylesheet', href='/stylesheets/sly.css')
    link(rel='stylesheet', href='/stylesheets/jquerymobile.css')
    script(src='/javascripts/WebDrum/src/web-ahdsr.js')
    script(src='/javascripts/WebAudioInstruments/Drum_Corp.js')
    script(src='/javascripts/WebAudioInstruments/Electronic.js')
    script(src='/javascripts/WebAudioInstruments/Pitched.js')
    script(src='/javascripts/WebAudioInstruments/Player.js')
    script(src='/javascripts/WebAudioInstruments/loadAudioFiles.js')
    script(src='/javascripts/WebAudioInstruments/Metronome.js')
    script(src='/javascripts/Logger/jsnlog.min.js')
    script(src='/javascripts/MalloTools/TimeTools.js')
    script(src='/javascripts/Cookies/cookies.js')
    script(src='/javascripts/interfaceConstants.js')
    script.

        var audioContext;
        var nPlayers = 3;
        var players = [];
        var metronome;
        var tempo = 90.0;
        var instrumentPresets = [];
        var channelPresets = {};
        var nPresetChannels = 0;
        var nPresetInstruments = 0;
        var nPresetInstruments = 0;

        var ModeEnum = Object.freeze({"CHANNELS": 0, "PLAYERS": 1, "PARAMETERS": 2});
        var currentMode = ModeEnum.CHANNELS;
        var initMovements = false;
        var isAudioSetup = false;

        var scheduler;
        var syncClient;
        var stayAwake;

        var amIperformer = 0;


        const CONSENT_COOKIE_NAME = "consentFormAgreement";
        const DAYS_TO_KEEP_COOKIE = 1;

        var customIPflag = 0;
        var serverURL = 'http://localhost:3000';
        var customServerURL = '192.168.1.9:3000';
        //var customServerURL = '10.102.39.183:3000';
        //var customServerURL = '130.56.213.166:3000';
        //var customServerURL = '10.227.28.178:3000';
        //var customServerURL = '10.8.65.195:3000';

        //FLAGS THAT ARE CONTROLLED BY SERVER and SERVER INTERFACE
        //Initialized in the onWelcome function

        // If the content is displayed, then user selection can turn logging off
        // otherwise logger will default to the loggerOn value
        var displayConsent;
        var loggerOn; // Users response of consent form can change this value.

        //the current interface mode that we are in
        //enum values are stored in interfaceConstants
        var currentInterface;

        //create the logger
        var logger = JL("Version1-Logger");

        window.addEventListener('load', init, false); //does nothing right now.

        if (customIPflag) {
            serverURL = customServerURL;
        }

        //socket to send/receive stuff from
        var socket = io(serverURL);

        socket.on('welcome', function (data) {

            //read in the current interface from the server
            currentInterface = data.mode;

            displayConsent = data.isConsentFormOn;
            loggerOn = data.isLoggerOn;
            isSeqOn = data.isSequencerOn;
            isMalloOn = data.isMalloOn;

            //console.log("SERVER SENT - Welcome Mode: " + parseInt(data.mode) + " host " + location.host);
            console.log("Display Consent? " + displayConsent + " Logger On? " + loggerOn + " Seq On? " + isSeqOn + " MalLo On? " + isMalloOn);

            // check if they have already consented
            var alreadyConsented = getCookie(CONSENT_COOKIE_NAME);

            // check if we should display the consent form
            // if so we will init logger and display in the click action of the ".consentButton" button
            if (displayConsent && (alreadyConsented == "")) {
                $('#consent').show();
            }
            //if we aren't showing the consent form
            // - then we should init the logger(if we are using it)
            // - load the page based on the interface mode
            else if ((alreadyConsented == 1) || !displayConsent) {
                if (loggerOn) {
                    initLogger();
                }
                loadInterface();
            } else if ((alreadyConsented == 0)) {
                loadInterface();
            }

            socket.emit('checkPerformers', {});


        });

        // receives this message if we are a performer!
        socket.on('setPerformer', function (data) {
            console.log("SET PERFORMER: " + data.performer);
            amIperformer = data.performer;
        });

        //receive messages from server (masterServerControl) on when to change the interface.
        socket.on('changeInterface', function (data) {
            //console.log("Interface Changed: " + data.newMode);
            if (loggerOn) {
                if (initMovements) {
                    logger.info("{ \"change_interface\" : " + data.newMode + ", \"global_time\" : " + syncClient.getTime() + "}");
                } else {
                    logger.info("{ \"change_interface\" : " + data.newMode + ", \"global_time\" : NA }");
                }
            }
            changeInterface(data.newMode);
        });

        //receive messages from server (masterServerControl) on when to turn on/off the sequencer
        socket.on('flipSeq', function (data) {
            //console.log("Message from server, turn sequencer: " + data.isOn);
            if (loggerOn) {
                if (initMovements) {
                    logger.info("{ \"flipSeq\" : " + data.isOn + ", \"global_time\" : " + syncClient.getTime() + "}");
                } else {
                    logger.info("{ \"change_interface\" : " + data.isOn + ", \"global_time\" : NA }");
                }
            }
            switchSequencerOn(data.isOn);
        });

        //receive messages from server (masterServerControl) on when to turn on/off the mallos
        socket.on('flipMallo', function (data) {
            console.log("Message from server, turn mallo: " + data.isOn);
            if (loggerOn) {
                if (initMovements) {
                    logger.info("{ \"flipMallo\" : " + data.isOn + ", \"global_time\" : " + syncClient.getTime() + "}");
                } else {
                    logger.info("{ \"flipMallo\" : " + data.isOn + ", \"global_time\" :  NA }");
                }
            }
            switchMalloOn(data.isOn);
        });


        //receive messages from server (masterServerControl) on when to turn on/off the metronome
        socket.on('flipMetro', function (data) {
            if (amIperformer) {
                if (loggerOn) {
                    if (initMovements) {
                        logger.info("{ \"flipMallo\" : " + data.isOn + ", \"global_time\" : " + syncClient.getTime() + "}");
                    } else {
                        logger.info("{ \"flipMallo\" : " + data.isOn + ", \"global_time\" : NA }");
                    }
                }
                console.log("I am performer, Flip Metro: " + data.isOn);
                switchMetronomeOn(data.isOn);
            } else {
                console.log("I am not performer don't do anything with metronome");
            }
        });

        //receive messages from server (masterServerControl) on when to change the channel
        socket.on('changeChannel', function (data) {
            //console.log("Change Channel " + data.newChannel);
            $('#channels').sly('activate', data.newChannel);
        });

        socket.on('time_res', function (data) {
            var receive_time = audioContext.currentTime;
            var instant_offset = data.serverTime / 1000.0 - (receive_time + data.clientTime) / 2;
            syncClient.addTimeOffset(instant_offset);
            // console.log("instant_offset: " + instant_offset + ", syncClient.getOffset(): " + syncClient.getOffset());
        });

        //when we receive predictions, schedule them
        socket.on('note_prediction', function (data) {
            if (isMalloOn) {
                console.log("isMalloOn prediction: " + isMalloOn);
                //todo: schedule the event
                var offset = syncClient.getOffset();
                var offset = syncClient.getOffset();
                var instr;
                if (data.address == "/left") {
                    instr = 0;
                }
                if (data.address == "/middle") {
                    instr = 1;
                }
                if (data.address == "/right") {
                    instr = 2;
                }
                scheduler.curPredictions[instr] = (data.time / 1000.0) - offset;
                //console.log("diff: " + (scheduler.curPredictions[instr] - audioContext.currentTime));
                //console.log("currentTime: " + audioContext.currentTime + ", scheduler.curPredictions[instr]: " + scheduler.curPredictions[instr]);
            }
        });

        socket.on('error', console.error.bind(console));


        /*********** functions ***********/

        // init is connected to the window load event.
        function init() {
        }

        // Setup an event listener for clicks on the soundCheck button
        // This will initialize our audio context so that it works on ios.
        $(function () {
            $("#soundCheck").on("click", function () {

                if (!isAudioSetup) {
                    try {
                        // Fix up for prefixing
                        if (isAudioContextSupported()) {
                            //console.log("Web Audio is supported!");
                            audioContext = new (window.AudioContext || window.webkitAudioContext)();
                        }
                    } catch (e) {
                        $('#notSupported').show();
                        alert('You need webaudio support - try another browser or device');
                    }

                    for (var i = 0; i < nPlayers; i++) {
                        players.push(new Player());
                    }

                    if (amIperformer) {
                        metronome = new Metronome(audioContext);
                        metronome.setTempo(tempo);
                    }

                    // play sound to test audio
                    //playSound(audioContext.currentTime);

                    loadAudioFiles(amIperformer);
                    if (currentInterface == InterfaceEnum.INFO) {
                        console.log("currentInterface: " + currentInterface);
                        $('#sequencerOn').show();
                        switchSequencerOn(true);
                        switchMalloOn(false);
                    } else {
                        playSound(audioContext.currentTime);
                    }
                    if (!initMovements) {
                        console.log("Init Movements");
                        initSyncAndScheduler();
                        loadJSONandDOM();
                        initMovements = true;
                    }
                    isAudioSetup = true;

                } else {
                    // play sound to test audio
                    if (currentInterface != InterfaceEnum.INFO) {
                        playSound(audioContext.currentTime);
                    }
                }
            });
        });


        //TODO: Have it play something pretty here :)
        function playSound(time) {
            //console.log("Play Sound");
            var beepGain = audioContext.createGain();
            var beepLevel = audioContext.createGain();
            beepLevel.gain.value = 0.4;
            var envelope = new WebAHDSR(audioContext, beepGain.gain);
            var oscillator = audioContext.createOscillator();
            oscillator.frequency.value = 400;
            oscillator.connect(beepGain);
            beepGain.connect(beepLevel);
            beepLevel.connect(audioContext.destination);
            envelope.on();
            oscillator.start(time);
            oscillator.stop(time + 0.5);    // you can set this to zero, but I left it here for testing.
        }



        // function that initalizes the logger - called within the consentButton click action
        // or the "on welcome" socket event
        function initLogger() {
            var appender = JL.createAjaxAppender("Appender");
            appender.setOptions({
                "batchSize": 5 //the number of logs that are acquired before they get sent
            });
            logger.setOptions({
                "appenders": [appender]
            });
            var dateTime = Date.now();
            if (loggerOn) {
                logger.info("{ \"start_logging\" : " + dateTime + ", \"global_time\" : NA }");
            }
        }

        // initalizes the time synchronizer and scheduler
        function initSyncAndScheduler() {
            syncClient = new SyncClient();
            if (syncClient != undefined) {
                console.log("syncClient is defined");
                if (amIperformer) {
                    metronome.setSyncClient(syncClient);
                }
                scheduler = new Scheduler(players, audioContext, logger, syncClient);
            } else {
                console.log("syncClient is undefined");
            }
            var timeSyncInterval = 500;
            // starts time sync
            setInterval(function () {
                socket.emit('time_req', {
                    clientTime: audioContext.currentTime,
                });
            }, timeSyncInterval);

            var schedulerInterval = 20;
            // checks scheduler
            setInterval(function () {
                //players[0].schedule(audioContext.currentTime+.5);
                scheduler.checkSchedule();
            }, schedulerInterval);

            if (isSeqOn) {
                switchSequencerOn(true);
            }

            stayAwake = setInterval(function () {
                //console.log("stay awake!");
                location.href = location.href; //try refreshing
                window.setTimeout(window.stop, 0); //stop it soon after
            }, 25000);


        }

        //start sequencer:
        var sequencerID = 0;
        var tutorialSequencer = 0;

        function switchSequencerOn(isOn) {
            if (isOn) {
                sequencerID = setInterval(function () {
                    console.log('Timer, ' + tutorialSequencer);
                    if (tutorialSequencer == 0) {
                        scheduler.setPrediction(audioContext.currentTime + 0.01, 0);
                    } else if (tutorialSequencer == 1) {
                        scheduler.setPrediction(audioContext.currentTime + 0.01, 1);
                    } else if (tutorialSequencer == 2) {
                        scheduler.setPrediction(audioContext.currentTime + 0.01, 2);
                    } else if (tutorialSequencer == 3) {
                        //scheduler.setPrediction(audioContext.currentTime + 0.01, 0);
                        //scheduler.setPrediction(audioContext.currentTime + 0.01, 1);
                        //scheduler.setPrediction(audioContext.currentTime + 0.01, 2);
                    }
                    tutorialSequencer++;
                    if (tutorialSequencer == 4) {
                        tutorialSequencer = 0;
                    }
                }, 500);
            } else {
                clearInterval(sequencerID);
            }
        }

        function switchMetronomeOn(isOn) {
            if (isOn) {
                // make sound
                ///metronome.stop();
                metronome.start();
                //console.log("Metro make sound");
            } else {
                //console.log("Metro stop makein sound");
                metronome.stop();
            }
        }

        function switchMalloOn(isOn) {
            isMalloOn = isOn;
        }

        // Have the JSON and DOM loaded in such an asynchronous sequence with a series of callbacks
        // when files have finished loaded.
        function loadJSONandDOM() {
            loadInstrumentsfile(function (response1) {
                //Parse JSON string into object
                instrumentPresets = JSON.parse(response1);
                nPresetInstruments = 0;
                for (var inst in instrumentPresets) {
                    nPresetInstruments++;
                }

                loadPresetsfile(function (response2) {
                    // Parse JSON string into object
                    var presetsJSON = JSON.parse(response2);
                    ch_index = 0;
                    for (var channel in presetsJSON) {
                        instr_index = 0;
                        channelPresets[ch_index] = {}
                        for (var instrument in presetsJSON[channel]) {
                            //may not have to do this... access using variables names...
                            channelPresets[ch_index][instr_index] = presetsJSON[channel][instrument];
                            instr_index++;
                        }
                        ch_index++;
                    }
                    nPresetChannels = ch_index;
                    loadDOMStuff();
                });
            });
        }

        function loadInstrumentsfile(callback) {
            //console.log("load Instr File");
            var request = new XMLHttpRequest();
            //request.overrideMimeType("application/json");
            request.open('GET', '/json/instruments.json', true); // Replace 'my_data' with the path to your file
            request.onreadystatechange = function () {
                if (request.readyState == 4 && request.status == "200") {
                    // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode
                    callback(request.responseText);
                }
            };
            request.send(null);
        }

        function loadPresetsfile(callback) {
            //console.log("load Presets File");
            var request = new XMLHttpRequest();
            request.open('GET', '/json/channels.json', true);
            request.onreadystatechange = function () {
                if (request.readyState == 4 && request.status == "200") {
                    // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode
                    callback(request.responseText);
                }
            };
            request.send(null);
        }

        function isAudioContextSupported() {
            // This feature is still prefixed in Safari
            window.AudioContext = window.AudioContext || window.webkitAudioContext;
            return window.AudioContext;
        }

        /*************** JQuery stuff *****************/

        // Load the initial display - hide all visuals
        $(document).ready(function () {
            // hide all visuals
            $('#header').hide();
            $('#consent').hide();
            $('#welcome').hide();
            $('#movement1').hide();
            $('#movement2').hide();
            $('#survey').hide();
            $('#credits').hide();
            $('#footer').hide();
            $('#saveFooter').hide();
            $('#sequencerOn').hide();
            $('#notSupported').hide();


            $('#popupPlayer').hide();
            $('#popupChannel').hide();
            $('#popupParams').hide();
            $('#m0-el-size-l').hide();
            $('#m0-el-size-r').hide();
            $('#m1-el-size-l').hide();
            $('#m1-el-size-r').hide();
            $('#m2-el-size-l').hide();
            $('#m2-el-size-r').hide();
        });

        function changeInterface(newMode) {
            prevInterface = currentInterface;
            currentInterface = newMode;
            loadInterface();
        }

        // Call after updating the current Interface.
        function loadInterface() {
            //console.log("Current Mode " + currentInterface);
            $('#credits').hide();
            $('#header').hide();

            if (currentInterface == InterfaceEnum.SURVEY) {
                $('#survey').show();
                $('#consent').hide();
                $('#welcome').hide();
                $('#movement1').hide();
                $('#movement2').hide();
            } else if (!isAudioSetup || currentInterface == InterfaceEnum.INFO) {
                if (currentInterface == InterfaceEnum.INFO) {
                    $('#footer').hide();
                } else {
                    $('#footer').show();
                }
                $('#welcome').show();
                $('#audioSetup').hide();

                $('#consent').hide();
                $('#movement1').hide();
                $('#movement2').hide();
                $('#survey').hide();
            } else {
                //otherwise we are in a sound making interface!
                if (!initMovements) {
                    //console.log("Init Movements");
                    initSyncAndScheduler();
                    loadJSONandDOM();
                    initMovements = true;
                }
                $('#footer').hide();
                switch (currentInterface) {
                    case InterfaceEnum.M1:
                        $('#movement1').show();
                        switchSequencerOn(false);
                        switchMalloOn(true);


                        $('#consent').hide();
                        $('#welcome').hide();
                        $('#movement2').hide();
                        $('#survey').hide();
                        break;
                    case InterfaceEnum.TUTORIAL:
                        //disaply Tutorial header
                        $('#header').show();
                        switchSequencerOn(true);
                        switchMalloOn(false);

                        //begin popups

                        $('#movement2').show();
                        $('#tabButton1').trigger('click');

                        $('#channels').sly('reload');

                        $('#consent').hide();
                        $('#welcome').hide();
                        $('#movement1').hide();
                        $('#survey').hide();
                        break;

                    case InterfaceEnum.M2:
                        switchSequencerOn(false);
                        switchMalloOn(true);

                        $('#movement2').show();
                        $('#tabButton1').trigger('click');
                        $('#channels').sly('reload');

                        $('#consent').hide();
                        $('#welcome').hide();
                        $('#movement1').hide();
                        $('#survey').hide();
                        break;

                    default:
                        break;
                }
            }
        }

        // function for the "Next Page" button during testing purposes to force the interface
        // to go to the next page.
        function nextPage() {
            //if audio is setup go to the next page, otherwise make sure users click the setup button
            if (isAudioSetup) {

                switch (currentInterface) {
                    case InterfaceEnum.INFO:
                        $('#audioSetup').hide();
                        changeInterface(InterfaceEnum.M1);
                        break;

                        //uncomment if you want to use the button to navigate:
                        /*
                         case InterfaceEnum.M1:
                         changeInterface(InterfaceEnum.TUTORIAL);
                         break;
                         case InterfaceEnum.TUTORIAL:
                         changeInterface(InterfaceEnum.M2);
                         break;
                         case InterfaceEnum.M2:
                         changeInterface(InterfaceEnum.SURVEY);
                         $('#footer').hide();
                         break;
                         */
                    default:
                        $('#footer').hide();
                        changeInterface(currentInterface);
                        break;
                }
            } else {
                $('#audioSetup').show();
            }
        }

        function loadDOMStuff() {
            //setup channels slider
            var $channels_frame = $('#channels');
            var $channels_wrap = $channels_frame.parent();

            var channels_options = {
                horizontal: 1,
                itemNav: 'forceCentered',
                smart: 1,
                activateMiddle: 1,
                activateOn: 'click',
                mouseDragging: 1,
                touchDragging: 1,
                releaseSwing: 1,
                startAt: 0,
                scrollBar: $channels_wrap.find('.scrollbar'),
                scrollBy: 1,
                speed: 200,
                elasticBounds: 1,
                easing: 'swing',
                clickBar: 1
            };

            //create our sly for the channels box slider
            var sly_channels = new Sly('#channels', channels_options);

            //Setup event listener for when a new item has been activated
            //eventName: Event Name
            //itemIndex: index of active item.


            sly_channels.on('active', function (eventName, itemIndex) {
                //Change the channel params
                if (currentMode == ModeEnum.CHANNELS) {
                    //for each player load in the instrument presets
                    for (var i = 0; i < nPlayers; i++) {
                        //get the instrument index:
                        var instr = channelPresets[itemIndex][i];
                        //console.log("New Channel " + itemIndex + " Instrument Preset: " + instr);
                        var params = instrumentPresets['i' + instr];
                        players[i].setParameters(params);
                        //update the channel sliders
                        $('#i' + i).sly('activate', instr);
                    }
                }
                //console.log("Channel Active Item: " + itemIndex);
                refreshSliders();
            });

            sly_channels.on('moveEnd', function (eventName) {
                if (currentMode == ModeEnum.CHANNELS) {
                    var el = document.querySelector(".active").id;
                    var ch_number = parseInt(el.slice(3));
                    if (loggerOn) {
                        logger.info("{ \"channel\" : " + ch_number + ", \"global_time\" : " + syncClient.getTime() + "}");
                    }
                }
            });


            //Create 3 sliders for mode 2!
            for (var i = 0; i < nPlayers; i++) {
                var $frame = $('#i' + i);
                var $wrap = $frame.parent();

                var i_options = {
                    horizontal: 1,
                    itemNav: 'forceCentered',
                    smart: 1,
                    activateMiddle: 1,
                    activateOn: 'click',
                    mouseDragging: 1,
                    touchDragging: 1,
                    releaseSwing: 1,
                    startAt: 0,
                    scrollBar: $wrap.find('.scrollbar'),
                    scrollBy: 1,
                    speed: 200,
                    elasticBounds: 1,
                    easing: 'swing',
                    clickBar: 1
                };

                //create our sly
                var sly = new Sly('#i' + i, i_options);

                sly.on('active', function (eventName, itemIndex) {

                    var id = this.frame.id;
                    var playerNum = parseInt(id.slice(1));
                    //if we are currently in mode 1 then update the players:
                    if (currentMode == ModeEnum.PLAYERS) {
                        var instr = itemIndex;
                        //console.log("Instrument Preset: " + instr);
                        var params = instrumentPresets['i' + instr];
                        players[playerNum].setParameters(params);
                        sliderChange(playerNum, params);
                        //if(loggerOn){ logger.info("Active:" + id); }
                    }
                    //console.log("Instr " + id + " Active Item: " + itemIndex);
                });

                sly.on('moveEnd', function (eventName) {
                    if (currentMode == ModeEnum.PLAYERS) {
                        var el = this.frame.querySelector(".active");
                        var playerNum = parseInt(el.id.slice(1));
                        var instrNum = parseInt(el.id.slice(3));
                        if (loggerOn) {
                            logger.info("{ \"player_" + playerNum + "\" : " + instrNum + ", \"global_time\" : " + syncClient.getTime() + "}");
                            ;
                        }
                    }
                });

                sly.init();
                sly.activate(0);

                //console.log("Arrange Presets for " + i + ": " + nPresetInstruments);
                for (var j = 0; j < nPresetInstruments; j++) {
                    //console.log("Append: " + j);
                    $('[id="i' + i + '_slidee"]').append('<li id = i' + i + '_' + j + '>' + j + '</div>');
                }
                $('#i' + i).sly('reload');

            }

            // intialize the channels sly and activate the 0th box
            // Need to do this after creating the channel slys - otherwise activate won't
            // set them properly
            sly_channels.init();


            for (var i = 0; i < nPresetChannels; i++) {
                $('[id="ch_slidee"]').append('<li id = ' + 'ch_' + i + '>' + i + '</div>');
            }

            $('#channels').sly('reload');
            sly_channels.activate(0);


            $("#movement2").tabs({
                activate: function (event, ui) {
                    var active = $('#movement2').tabs('option', 'active');
                    if (loggerOn) {
                        logger.info("{ \"tab\" : " + active + ", \"global_time\" : " + syncClient.getTime() + "}");
                    }
                    if (active == 0) {
                        $('#channels').sly('reload');
                        currentMode = ModeEnum.CHANNELS;
                    }
                    else if (active == 1) {
                        currentMode = ModeEnum.PLAYERS;
                        for (var i = 0; i < nPlayers; i++) {
                            $('#i' + i).sly('reload');
                        }
                    } else {
                        currentMode = ModeEnum.PARAMETERS;
                        refreshSliders();
                    }

                    //Change the name of the mode title
                    $("#mode").html($("#movement2 ul>li a").eq(active).attr('name'));
                    //console.log("Mode: " + currentMode);

                }
            });


            //show or hide sliders for mode 3 depending on the selector
            //Selector for ids that end in '-select'
            $('[id$="-select"]').change(function () {
                //get the id and extract the mallo id (m0, m1, m2)
                var id = $(this).attr('id');
                var playerNum = parseInt(id.slice(1));
                //console.log("Select Player: " + playerNum);
                var malloId = id.slice(0, 2);
                //get the value for the child that is selected
                var nextpage = $(this).children('option:selected').attr('value');


                var active = $('#movement2').tabs('option', 'active');

                //if we are in mode 3 - then log the change!
                if (active == 2) {
                    if (loggerOn) {
                        logger.info("{ \"" + id + "\" : " + nextpage + ", \"global_time\" : " + syncClient.getTime() + "}");
                    }
                }

                //show/hide based on the selection.
                if (nextpage == '0') {
                    //console.log("Selected 1!");
                    players[playerNum].activeInstrument = 0;
                    $('#' + malloId + '-dc-vol').val(players[playerNum].level).trigger('change');
                    $('#' + malloId + '-dc-size').val(players[playerNum].size).trigger('change');
                    $('#' + malloId + '-dc-decay').val(players[playerNum].decay).trigger('change');
                    $('#' + malloId + '-dc').show();
                    $('#' + malloId + '-pp').hide();
                    $('#' + malloId + '-el').hide();

                } else if (nextpage == '1') {
                    //console.log("Selected 2!");
                    players[playerNum].activeInstrument = 1;
                    $('#' + malloId + '-el-vol').val(players[playerNum].level).trigger('change');
                    $('#' + malloId + '-el-size').val(players[playerNum].size).trigger('change');
                    $('#' + malloId + '-el-decay').val(players[playerNum].decay).trigger('change');
                    $('#' + malloId + '-dc').hide();
                    $('#' + malloId + '-pp').show();
                    $('#' + malloId + '-el').hide();
                } else {
                    //console.log("Selected 3!");
                    players[playerNum].activeInstrument = 2;
                    $('#' + malloId + '-pp-vol').val(players[playerNum].level).trigger('change');
                    $('#' + malloId + '-pp-size').val(players[playerNum].size).trigger('change');
                    $('#' + malloId + '-pp-decay').val(players[playerNum].decay).trigger('change');
                    $('#' + malloId + '-dc').hide();
                    $('#' + malloId + '-pp').hide();
                    $('#' + malloId + '-el').show();
                }
            });
        }

        function sliderChange(playerNum, params) {
            //set active Instrument - which will trigger changes to the params
            var activeInstrument = params["activeInstrument"];
            $('#m' + playerNum + '-select').val(activeInstrument).trigger('change');
        }

        //gets parameters from the players and sets
        function refreshSliders() {
            for (var i = 0; i < nPlayers; i++) {
                params = players[i].getParameters();

                //console.log("REFRESH: " + i + " " + params);
                //set active Instrument;
                var activeInstrument = params["activeInstrument"];
                $('#m' + i + '-select').val(activeInstrument).trigger('change');

                switch (activeInstrument) {
                    case DRUM_CORP:
                        //console.log("Reset player" + i + " drum pitch: " + params["drumPitch"]);
                        $('#m' + i + '-dc-vol').val(params["level"]).trigger('change');
                        $('#m' + i + '-dc-size').val(params["size"]).trigger('change');
                        $('#m' + i + '-dc-decay').val(params["decay"]).trigger('change');
                        $('#m' + i + '-dc-pitch').val(params["drumPitch"]).trigger('change');
                        $('#m' + i + '-dc-drums').val(params["nDrummers"]).trigger('change');
                        $('#m' + i + '-dc-dyn').val(params["dynamics"]).trigger('change');
                        break;
                    case PITCHED:
                        $('#m' + i + '-pp-vol').val(params["level"]).trigger('change');
                        $('#m' + i + '-pp-size').val(params["size"]).trigger('change');
                        $('#m' + i + '-pp-decay').val(params["decay"]).trigger('change');
                        $('#m' + i + '-pp-scale').val(params["range"]).trigger('change');
                        $('#m' + i + '-pp-vib').val(params["vibrato"]).trigger('change');
                        $('#m' + i + '-pp-trip').val(params["trippiness"]).trigger('change');
                        break;
                    case ELECTRONIC:
                        $('#m' + i + '-el-vol').val(params["level"]).trigger('change');
                        $('#m' + i + '-el-size').val(params["size"]).trigger('change');
                        $('#m' + i + '-el-decay').val(params["decay"]).trigger('change');
                        $('#m' + i + '-el-grunge').val(params["grunge"]).trigger('change');
                        $('#m' + i + '-el-pitch').val(params["electronicPitch"]).trigger('change');
                        $('#m' + i + '-el-fat').val(params["fatness"]).trigger('change');
                        break;
                    default:
                        console.log("fell to the bottom of the getParameters switch statement (we should not have)");
                }
            }
        }

        $.fn.serializeObject = function () {
            var o = {};
            var a = this.serializeArray();
            $.each(a, function () {
                if (o[this.name] !== undefined) {
                    if (!o[this.name].push) {
                        o[this.name] = [o[this.name]];
                    }
                    o[this.name].push(this.value || '');
                } else {
                    o[this.name] = this.value || '';
                }
            });
            return o;
        };

        $(function () {
            $('#saveButton').click(function () {
                //var str = JSON.stringify($('#m-form').serializeObject());
                //console.log("Save");
                var dateTime = Date.now();
                var params = {};
                for (var i = 0; i < nPlayers; i++) {
                    params[i] = players[i].getParameters();
                }

                var str = JSON.stringify(params);
                //console.log(str);

                // Add string to the result element
                // $('#result').text(str);

                socket.emit('saveJSON', {
                    type: "params",
                    str: str,
                    dateTime: dateTime
                });

                if (loggerOn) {
                    logger.info("{ \"save_params\" : " + dateTime + ", \"global_time\" : " + syncClient.getTime() + "}");
                }

                return false;
            });
        });



        //slider changes!
        $(function () {
            $(".ui-slider").on('change', function (event) {
                var id = event.target.id;
                var playerNumber = parseInt(id.slice(1));
                var value = $(this).text();
                //console.log("Slider Changes: " + event.target.id + " " + playerNumber + " " + value);
                var instrType = players[playerNumber].activeInstrument;
                if (id.indexOf("vol") > -1) {
                    players[playerNumber].level = value;
                } else if (id.indexOf("decay") > -1) {
                    players[playerNumber].decay = value;
                } else if (id.indexOf("size") > -1) {
                    players[playerNumber].size = value;
                } else if (id.indexOf("dc-pitch") > -1) {
                    players[playerNumber].drumPitch = value;
                } else if (id.indexOf("dc-dyn") > -1) {
                    players[playerNumber].dynamics = value;
                } else if (id.indexOf("dc-drums") > -1) {
                    players[playerNumber].nDrummers = value;
                } else if (id.indexOf("pp-vib") > -1) {
                    players[playerNumber].vibrato = value;
                } else if (id.indexOf("pp-trip") > -1) {
                    players[playerNumber].trippiness = value;
                } else if (id.indexOf("pp-scale") > -1) {
                    players[playerNumber].range = value;
                } else if (id.indexOf("el-fat") > -1) {
                    players[playerNumber].fatness = value;
                } else if (id.indexOf("el-pitch") > -1) {
                    players[playerNumber].electronicPitch = value;
                } else if (id.indexOf("el-grunge") > -1) {
                    players[playerNumber].grunge = value;
                }
            });
        });


        //creates the animation and activation for the navigation bar
        $(function () {
            $(document).delegate('[data-role="navbar"] a', 'click', function () {
                $('[data-role="navbar"] a').removeClass("ui-btn-active");
                $('.tabs-content').children().hide();
                $('#' + $(this).attr('data-tab')).show();
                //$("html,body").animate({scrollTop: 0}, 500);
                $(this).addClass("ui-btn-active");
            });
        });

        $(window).resize(function (e) {
            $('#channels').sly('reload');
            $('#i0').sly('reload');
            $('#i1').sly('reload');
            $('#i2').sly('reload');
        });

        $(document).on("tabsbeforeactivate", "#movement2", function (e, ui) {
            var reverse = ui.newPanel.index() < ui.oldPanel.index() ? " reverse" : "",
                    classes = "in slide" + reverse;
            $(ui.newPanel).addClass(classes).one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
                $(this).removeClass(classes);
            });
        });

        //log when sliders stop (either by clicking, dragging, or selecting the handle
        $(function () {
            $(".ui-slider").on('slidestop', function (event) {
                if (loggerOn) {
                    logger.info("{ \"" + event.target.id + "\" : " + event.target.value + ", \"global_time\" : " + syncClient.getTime() + "}");
                }
            });
        });

        $(function () {
            $(".consentButton").on("click", function (event, ui) {
                //if we can log data:
                didConsent = event.target.id;
                if (didConsent) {
                    initLogger();
                    loggerOn = 1;
                } else {
                    loggerOn = 0;
                }
                var dateTime = Date.now();
                if (loggerOn) {
                    logger.info("{ \"consent\" : " + didConsent + ", \"time\" : " + dateTime + "\"global_time\" : NA }");
                }
                //set cookies for whether the consent form was answered
                setCookie(CONSENT_COOKIE_NAME, didConsent, DAYS_TO_KEEP_COOKIE);
                $('#consent').hide();
                loadInterface();
            });
        });

        function submitEmailButton(doWeSubmit) {
            //is submit - send email to server and flush buffers
            if (doWeSubmit) {
                var randCode = generateRandomCode(10);
                var params = {};
                var email = document.getElementById("emailTextBox").value;
                //console.log("EMAIL: " + email);
                params["email"] = email;
                params["code"] = randCode;

                var str = JSON.stringify(params);
                //console.log(str);

                var dateTime = Date.now();

                socket.emit('saveJSON', {
                    type: "email",
                    str: str,
                    dateTime: dateTime
                });


                if (loggerOn) {
                    if (initMovements) {
                        logger.info("{ \"save_email\" : " + dateTime + ", \"global_time\" : " + syncClient.getTime() + "}");
                    } else {
                        for (var i = 0; i < 19; i++) {
                            logger.info("{ \"save_email\" : " + dateTime + "}");
                        }
                    }
                }
            } else {
                //flush the buffers
                if (loggerOn) {
                    if (initMovements) {
                        logger.info("{ \"no_save_email\" : " + dateTime + ", \"global_time\" : " + syncClient.getTime() + "}");
                    }
                    else {
                        for (var i = 0; i < 19; i++) {
                            logger.info("{ \"no_save_email\" : " + dateTime + "}");
                        }
                    }
                }
            }

            //load the credits!
            $('#survey').hide();
            $('#credits').show();
            clearInterval(stayAwake);
        }

        function startTutorial() {
            if (loggerOn) {
                logger.info("{ \"tutorial\" : 0, \"global_time\" : " + syncClient.getTime() + "}");
            }
            $('#tutorialText').hide();
            $('#popupChannel').show();
            $('#tabButton1').trigger('click');
            return false;
        }

        function channelsNext() {
            if (loggerOn) {
                logger.info("{ \"tutorial\" : 1, \"global_time\" : " + syncClient.getTime() + "}");
            }
            console.log("Offset: " + $('#mode').get(0).offsetTop);
            $('#popupChannel').hide();
            $('#popupPlayer').show();
            $('#tabButton2').trigger('click');
        }

        function playersNext() {
            if (loggerOn) {
                logger.info("{ \"tutorial\" : 2, \"global_time\" : " + syncClient.getTime() + "}");
            }

            $('#popupPlayer').hide();
            $('#popupParams').show();
            $('#tabButton3').trigger('click');
        }

        function paramsNext() {
            if (loggerOn) {
                logger.info("{ \"tutorial\" : 3, \"global_time\" : " + syncClient.getTime() + "}");
            }
            $('#popupParams').hide();
            $('#tutorialText').show();
        }

        function generateRandomCode(num) {
            var s = "";
            while (s.length < num && num > 0) {
                var r = Math.random();
                s += (r < 0.1 ? Math.floor(r * 100) : String.fromCharCode(Math.floor(r * 26) + (r > 0.5 ? 97 : 65)));
            }
            return s;
        }

    #consent.center.ui-content(data-role='main')
        .ui-body.ui-body-a.ui-corner-all
            h3(role='banner') Data Collection Consent Form
            .ui-block-a(style='width:10%')
            .ui-block-b(style='width:80%')
                div(style='margin: 10px 0 0 0;')
                    p
                        | The composers of this piece are interested in gathering the data from your interactions with this interface to be analyzed for research purposes.
            .ui-block-c(style='width:10%')

            a.consentButton.ui-btn.ui-btn-inline(id='1') Yes - You Can Use My Data
            a.consentButton.ui-btn.ui-btn-inline(id='0') No - Do not Use My Data
    #welcome.ui-content(data-role='main')
        .ui-body.ui-body-a.ui-corner-all
            h3.center.player1_color(role='banner') Welcome to the March MalLo performance website!
            .ui-block-a(style='width:10%')
            .ui-block-b(style='width:80%')
                div(style='margin: 10px 0 0 0;')
                    p
                        | Put in your headphones and click the button below.
                    button#soundCheck.ui-btn.ui-btn-inline.ui-shadow.ui-btn.ui-corner-all.ui-mini.center(type='button') Enable Audio and Check Sound
                div#audioSetup(style='margin: 10px 0 0 0;',)
                    p
                        | You must click the sound check button to enable the audio for this piece.
                div#notSupported(style='margin: 10px 0 0 0;',)
                    p.player2_color
                        | You need WebAudio support - try another browser or device
                div#sequencerOn(style='margin: 10px 0 0 0;',)
                    p
                        | You should hear a sequence of three beats and a rest. If you do not, then your device will not work for this piece.
                        | Headphone jack splitters are available upon request so you can share with a neighbor.
                    p#tips(style='margin: 10px 0 0 0;')
                        p.player3_color Some tips for the performance:
                        ul Do not navigate away from the page.
                        ul If things don't seem to be working right, try refreshing your browser.
                        ul Make sure to keep your computer awake during the piece.
                        ul Reminder: You are not connected to the internet while you are on this router.
                    p#thanks(style='margin: 10px 0 0 0;',)
                        p.player2_color  Thank you for your patience as we get setup!
                        p.player1_color This screen will change when the piece begins.

            .ui-block-c(style='width:10%')
    #movement1.center.ui-content(data-role='main')
        .ui-body.ui-body-a.ui-corner-all
            h3(role='banner') Movement 1
            .ui-block-a(style='width:10%')
            .ui-block-b(style='width:80%')
                div(style='margin: 10px 0 0 0;')
                    p
                        | There is no interaction for Movement 1. Sit back and enjoy the piece.
            .ui-block-c(style='width:10%')
    #header.center.ui-content(data-role='main')
        .ui-body.ui-body-a.ui-corner-all
            h3(role='banner') Intermission
            p.player1_color To prepare you for Movement 2, take a few minutes to play with the interface.
            p.player2_color A drum sequencer is controlling the sound.
            div#tutorialText(data-theme='b')
                a.ui-btn-b.tutorialButton.ui-btn.ui-corner-all.ui-shadow.ui-btn-inline(name='1', onclick='startTutorial()') Click for tutorial
            h5#popupChannel(data-theme='b')
                .ui-body.ui-body-b.ui-corner-all
                    p In the 'Change the Channel' mode you can swipe or click the slider to change the presets for all players.
                    button#channelsNext.ui-btn.ui-btn-inline.ui-shadow.ui-btn.ui-corner-all.ui-mini.center(type='button', onclick='channelsNext()') Next
            h5#popupPlayer(data-theme='c')
                .ui-body.ui-body-c.ui-corner-all
                    p In the 'Change the Player' mode you can swipe or click the sliders to change the presets for individual players.
                    button#playersNext.ui-btn.ui-btn-inline.ui-shadow.ui-btn.ui-corner-all.ui-mini.center(type='button', onclick='playersNext()') Next
            h5#popupParams(data-theme='d')
                .ui-body.ui-body-d.ui-corner-all
                    p In the 'Change the Parameters' mode you can change specific parameters for each individual players.
                    button#paramsNext.ui-btn.ui-btn-inline.ui-shadow.ui-btn.ui-corner-all.ui-mini.center(type='button', onclick='paramsNext()') Done

    #movement2(data-role='tabs', data-position='inline', role='banner', data-transition='slide')

        div(data-role='navbar')
            ul
                li
                    a#tabButton1(href='#one', data-icon='star' data-iconpos='bottom', data-ajax='false', rel='external', name = 'Change the Channel') Channels
                li
                    a#tabButton2(href='#two', data-icon='star' data-iconpos='bottom', data-ajax='false', rel='external',name = 'Change Each Player') Players
                li
                    a#tabButton3(href='#three', data-icon='star', data-iconpos='bottom', data-ajax='false', rel='external',name = 'Change Parameters') Parameters
        .ui-bar-a.ui(role='banner', data-mini='true', style='text-align:center;')
            h2#mode Change the Channel
        #one.ui-content(data-role='main')
            .form.wrap
                #ch_scrollbar.scrollbar
                    #channel_handle.handle(style='transform: translateZ(0px) translateX(228px);')
                #channels.frame(style='overflow; hidden;')
                    ul#ch_slidee.slide
        #two.ui-content(data-role='main')
            ul(data-role='listview', data-inset='true')
                li(data-icon='false', data-theme='b')
                    h2 Player 1
                li.form.wrap
                    #i0_scrollbar.scrollbar.player1_scrollbar
                            #i0_handle.handle(style='transform: translateZ(0px) translateX(228px);')
                    #i0.instr_frame.player1_frame(style='overflow; hidden;')
                            ul#i0_slidee.slidee
                li(data-icon='false', data-theme='c')
                    h2 Player 2
                li.form.wrap
                    #i1_scrollbar.scrollbar.player2_scrollbar
                        #i1_handle.handle(style='transform: translateZ(0px) translateX(228px);', data-theme='c')
                    #i1.instr_frame.player2_frame(style='overflow; hidden;', data-theme='c')
                        ul#i1_slidee.slidee(data-theme='c')
                li(data-icon='false', data-theme='d')
                    h2 Player 3
                li.form.wrap
                    #i2_scrollbar.scrollbar.player3_scrollbar
                            #i2_handle.handle(style='transform: translateZ(0px) translateX(228px);')
                    #i2.instr_frame.player3_frame(style='overflow; hidden;')
                            ul#i2_slidee.slidee
        #three.ui-content(data-role='main')
            form#m-form
                #m0-form.pop_countryBox(data-role='collapsible', data-inset='false', data-theme='b')
                    h3 Player 1
                    .ui-content
                        label.leftItem(for='m0-select') Type
                        .rightItem
                            select#m0-select(name='m0-select', data-mini='true', data-theme='b', data-iconpos='left')
                                option(value='0') Drum Corp
                                option(value='1') Pitched Percussion
                                option(value='2') Electronic
                    .ui-content#m0-dc
                        label.leftItem(for='m0-dc-vol') Volume
                        .rightItem
                            input#m0-dc-vol(type='range', name='m0-dc-vol', data-track-theme='b', data-theme='b', min='0', max='1', value='.5', step='.01', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-dc-size') Echo
                        .rightItem
                            input#m0-dc-size(type='range', name='m0-dc-size', data-track-theme='b', data-theme='b', min='0', max='99', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-dc-decay') Sustain
                        .rightItem
                            input#m0-dc-decay(type='range', name='m0-dc-decay', data-track-theme='b', data-theme='b', min='0', max='99', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-dc-pitch') Pitch
                        .rightItem
                            input#m0-dc-pitch(type='range', name='m0-dc-pitch', data-track-theme='b', data-theme='b', min='0', max='99', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-dc-drums') # o'Drums
                        .rightItem
                            input#m0-dc-drums(type='range', name='m0-dc-drums', data-track-theme='b', data-theme='b', min='1', max='10', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-dc-dyn') Dynamics
                        .rightItem
                            input#m0-dc-dyn(type='range', name='m0-dc-dyn', data-track-theme='b', data-theme='b', min='0', max='9', value='1', data-popup-enabled='true', data-mini='true')
                    .ui-content#m0-pp
                        label.leftItem(for='m0-pp-vol') Volume
                        .rightItem
                            input#m0-pp-vol(type='range', name='m0-pp-vol', data-track-theme='b', data-theme='b', min='0', max='1', value='.5', step='.01', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-pp-size') Echo
                        .rightItem
                            input#m0-pp-size(type='range', name='m0-pp-size', data-track-theme='b', data-theme='b', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-pp-decay') Sustain
                        .rightItem
                            input.ui-hidden-accessible#m0-pp-decay(type='range', name='m0-pp-decay', data-track-theme='b', data-theme='b', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-pp-scale') Pattern
                        .rightItem
                            input.ui-hidden-accessible#m0-pp-scale(type='range', name='m0-pp-scale', data-track-theme='b', data-theme='b', min='1', max='4', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-pp-vib') Vibrato
                        .rightItem
                            input.ui-hidden-accessible#m0-pp-vib(type='range', name='m0-pp-vib', data-track-theme='b', data-theme='b', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-pp-trip') Glimmer
                        .rightItem
                            input.ui-hidden-accessible#m0-pp-trip(type='range', name='m0-pp-trip', data-track-theme='b', data-theme='b', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                    .ui-content#m0-el
                        label.leftItem(for='m0-el-vol') Volume
                        .rightItem
                            input.ui-hidden-accessible#m0-el-vol(type='range', name='m0-el-vol', data-track-theme='b', data-theme='b', min='0', max='1', value='.5', step='.01', data-popup-enabled='true', data-mini='true')
                        label.leftItem#m0-el-size-l(for='m0-el-size') Echo
                        .rightItem#m0-el-size-r
                            input.ui-hidden-accessible#m0-el-size(type='range', name='m0-el-size', data-track-theme='b', data-theme='b', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-el-decay') Sustain
                        .rightItem
                            input.ui-hidden-accessible#m0-el-decay(type='range', name='m0-el-decay', data-track-theme='b', data-theme='b', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-el-grunge') Grunge
                        .rightItem
                            input.ui-hidden-accessible#m0-el-grunge(type='range', name='m0-el-grunge', data-track-theme='b', data-theme='b', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-el-pitch') Pattern
                        .rightItem
                            input.ui-hidden-accessible#m0-el-pitch(type='range', name='m0-el-pitch', data-track-theme='b', data-theme='b', min='1', max='4', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m0-el-fat') Pitch
                        .rightItem
                            input.ui-hidden-accessible#m0-el-fat(type='range', name='m0-el-fat', data-track-theme='b', data-theme='b',min='1', max='10', value='1', data-popup-enabled='true', data-mini='true')
                #m1-form.pop_countryBox(data-role='collapsible', data-inset='false', data-theme='c')
                    h3 Player 2
                    .ui-content
                        label.leftItem(for='m1-select') Type
                        .rightItem
                            select#m1-select(name='m1-select', data-mini='true', data-theme='c', data-iconpos='left')
                                option(value='0') Drum Corp
                                option(value='1') Pitched Percussion
                                option(value='2') Electronic
                    .ui-content#m1-dc
                        label.leftItem(for='m1-dc-vol') Volume
                        .rightItem
                            input#m1-dc-vol(type='range', name='m1-dc-vol', data-track-theme='c', data-theme='c', min='0', max='1', value='.5', step='.01',data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-dc-size') Echo
                        .rightItem
                            input#m1-dc-size(type='range', name='m1-dc-size', data-track-theme='c', data-theme='c', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-dc-decay') Sustain
                        .rightItem
                            input#m1-dc-decay(type='range', name='m1-dc-decay', data-track-theme='c', data-theme='c', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-dc-pitch') Pitch
                        .rightItem
                            input#m1-dc-pitch(type='range', name='m1-dc-pitch', data-track-theme='c', data-theme='c', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-dc-drums') # o'Drums
                        .rightItem
                            input#m1-dc-drums(type='range', name='m1-dc-drums', data-track-theme='c', data-theme='c', min='1', max='10', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-dc-dyn') Dynamics
                        .rightItem
                            input#m1-dc-dyn(type='range', name='m1-dc-dyn', data-track-theme='c', data-theme='c', min='0', max='9', value='1', data-popup-enabled='true', data-mini='true')
                    .ui-content#m1-pp
                        label.leftItem(for='m1-pp-vol') Volume
                        .rightItem
                            input.ui-hidden-accessible#m1-pp-vol(type='range', name='m1-pp-vol', data-track-theme='c', data-theme='c', min='0', max='1', value='.5', step='.01', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-pp-size') Echo
                        .rightItem
                            input.ui-hidden-accessible#m1-pp-size(type='range', name='m1-pp-size', data-track-theme='c', data-theme='c', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-pp-decay') Sustain
                        .rightItem
                            input.ui-hidden-accessible#m1-pp-decay(type='range', name='m1-pp-decay', data-track-theme='c', data-theme='c', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-pp-scale') Pattern
                        .rightItem
                            input.ui-hidden-accessible#m1-pp-scale(type='range', name='m1-pp-scale', data-track-theme='c', data-theme='c', min='1', max='4', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-pp-vib') Vibrato
                        .rightItem
                            input.ui-hidden-accessible#m1-pp-vib(type='range', name='m1-pp-vib', data-track-theme='c', data-theme='c', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-pp-trip') Glimmer
                        .rightItem
                            input.ui-hidden-accessible#m1-pp-trip(type='range', name='m1-pp-trip', data-track-theme='c', data-theme='c', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                    .ui-content#m1-el
                        label.leftItem(for='m1-el-vol') Volume
                        .rightItem
                            input.ui-hidden-accessible#m1-el-vol(type='range', name='m1-el-vol', data-track-theme='c', data-theme='c', min='0', max='1', value='.5', step='.01', data-popup-enabled='true', data-mini='true')
                        label.leftItem#m1-el-size-l(for='m1-el-size') Echo
                        .rightItem#m1-el-size-r
                            input.ui-hidden-accessible#m1-el-size(type='range', name='m1-el-size', data-track-theme='c', data-theme='c', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-el-decay') Sustain
                        .rightItem
                            input.ui-hidden-accessible#m1-el-decay(type='range', name='m1-el-decay', data-track-theme='c', data-theme='c', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-el-grunge') Grunge
                        .rightItem
                            input.ui-hidden-accessible#m1-el-grunge(type='range', name='m1-el-grunge', data-track-theme='c', data-theme='c', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-el-pitch') Pattern
                        .rightItem
                            input.ui-hidden-accessible#m1-el-pitch(type='range', name='m1-el-pitch', data-track-theme='c', data-theme='c', min='1', max='4', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m1-el-fat') Pitch
                        .rightItem
                            input.ui-hidden-accessible#m1-el-fat(type='range', name='m1-el-fat', data-track-theme='c', data-theme='c', min='1', max='10', value='1', data-popup-enabled='true', data-mini='true')
                #m2-form.pop_countryBox(data-role='collapsible', data-inset='false', data-theme='d')
                    h3 Player 3
                    .ui-content
                        label.leftItem(for='m2-select') Type
                        .rightItem
                            select#m2-select(name='m2-select', data-mini='true', data-theme='d', data-iconpos='left')
                                option(value='0') Drum Corp
                                option(value='1') Pitched Percussion
                                option(value='2') Electronic
                    .ui-content#m2-dc
                        label.leftItem(for='m2-dc-vol') Volume
                        .rightItem
                            input#m2-dc-vol(type='range', name='m2-dc-vol', data-track-theme='d', data-theme='d', min='0', max='1', value='.5', step='.01', data-popup-enabled='true',  data-mini='true')
                        label.leftItem(for='m2-dc-size') Echo
                        .rightItem
                            input#m2-dc-size(type='range', name='m2-dc-size', data-track-theme='d', data-theme='d', min='0', max='99', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-dc-decay') Sustain
                        .rightItem
                            input#m2-dc-decay(type='range', name='m2-dc-decay', data-track-theme='d', data-theme='d', min='0', max='99', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-dc-pitch') Pitch
                        .rightItem
                            input#m2-dc-pitch(type='range', name='m2-dc-pitch', data-track-theme='d', data-theme='d', min='0', max='99', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-dc-drums') # o'Drums
                        .rightItem
                            input#m2-dc-drums(type='range', name='m2-dc-drums', data-track-theme='d', data-theme='d', min='1', max='10', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-dc-dyn') Dynamics
                        .rightItem
                            input#m2-dc-dyn(type='range', name='m2-dc-dyn', data-track-theme='d', data-theme='d', min='0', max='9', value='1', data-popup-enabled='true', data-mini='true')
                    .ui-content#m2-pp
                        label.leftItem(for='m2-pp-vol') Volume
                        .rightItem
                            input.ui-hidden-accessible#m2-pp-vol(type='range', name='m2-pp-vol', data-track-theme='d', data-theme='d', min='0', max='1', value='.5', step='.01', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-pp-size') Echo
                        .rightItem
                            input.ui-hidden-accessible#m2-pp-size(type='range', name='m2-pp-size', data-track-theme='d', data-theme='d', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-pp-decay') Sustain
                        .rightItem
                            input.ui-hidden-accessible#m2-pp-decay(type='range', name='m2-pp-decay', data-track-theme='d', data-theme='d', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-pp-scale') Pattern
                        .rightItem
                            input.ui-hidden-accessible#m2-pp-scale(type='range', name='m2-pp-scale', data-track-theme='d', data-theme='d', min='1', max='4', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-pp-vib') Vibrato
                        .rightItem
                            input.ui-hidden-accessible#m2-pp-vib(type='range', name='m2-pp-vib', data-track-theme='d', data-theme='d', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-pp-trip') Glimmer
                        .rightItem
                            input.ui-hidden-accessible#m2-pp-trip(type='range', name='m2-pp-trip', data-track-theme='d', data-theme='d', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                    .ui-content#m2-el
                        label.leftItem(for='m2-el-vol') Volume
                        .rightItem
                            input.ui-hidden-accessible#m2-el-vol(type='range', name='m2-el-vol', data-track-theme='d', data-theme='d', min='0', max='1', value='.5', step='.01', data-popup-enabled='true', data-mini='true')
                        label.leftItem#m2-el-size-l(for='m2-el-size') Echo
                        .rightItem#m2-el-size-r
                            input.ui-hidden-accessible#m2-el-size(type='range', name='m2-el-size', data-track-theme='d', data-theme='d', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-el-decay') Sustain
                        .rightItem
                            input.ui-hidden-accessible#m2-el-decay(type='range', name='m2-el-decay', data-track-theme='d', data-theme='d', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-el-grunge') Grunge
                        .rightItem
                            input.ui-hidden-accessible#m2-el-grunge(type='range', name='m2-el-grunge', data-track-theme='d', data-theme='d', min='0', max='99', value='0', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-el-pitch') Pattern
                        .rightItem
                            input.ui-hidden-accessible#m2-el-pitch(type='range', name='m2-el-pitch', data-track-theme='d', data-theme='d', min='1', max='4', value='1', data-popup-enabled='true', data-mini='true')
                        label.leftItem(for='m2-el-fat') Pitch
                        .rightItem
                            input.ui-hidden-accessible#m2-el-fat(type='range', name='m2-el-fat', data-track-theme='d', data-theme='d', min='1', max='10', value='1', data-popup-enabled='true', data-mini='true')
        h2#result
        div#saveFooter(data-role='footer', role='banner', data-position='inline')
            h1
                .ui-grid-b
                    .ui-block-a(style='text-align: left;')
                    a#saveButton.ui-block-b.ui-btn-a.ui-btn.ui-corner-all.ui-shadow(data-role="button", style='text-align: center;', input type="submit") Save
                    .ui-block-c(style='text-align: right;')

    #survey.center.ui-content(data-role='main')
        .ui-body.ui-body-a.ui-corner-all
            h3(role='banner') Data Collection Survey
            .ui-block-a(style='width:10%')
            .ui-block-b(style='width:80%')
                div(style='margin: 10px 0 0 0;')
                    p
                        | Thank you for participating in our performance! Please enter you email address below to receive a survey on your experience. The survey will be sent after the concert and will be available for the next 48 hours.
            .ui-block-c(style='width:10%')

            .ui-block-a(style='width:10%')
            .ui-block-b(style='width:80%')
                .ui-field-contain()
                    label(for='emailTextBox', data-theme='b') Email:
                    input#emailTextBox(type='text', name='text-basic', data-theme='b', value='')
                .ui-field-contain
                    button#submitEmail.ui-btn.ui-btn-inline.ui-shadow.ui-btn.ui-corner-all.ui-mini(type='submit', style='width:60%', onclick="submitEmailButton(true)") Submit
                    button#notSubmitEmail.ui-btn.ui-btn-inline.ui-shadow.ui-btn.ui-corner-all.ui-mini(type='submit', style='width:45%', onclick="submitEmailButton(false)") No Thanks
            .ui-block-c(style='width:10%')

    #credits.center.ui-content(data-role='main')
        .ui-body.ui-body-a.ui-corner-all
            h3(role='banner') Performance Credits
            .ui-block-a(style='width:10%')
            .ui-block-b(style='width:80%')
                div(style='margin: 10px 0 0 0;')
                    p
                    p    Player 1 (Green):              Katie  Wolf
                    p    Player 2 (Blue):               Steven Landry
                    p    Player 3 (Player):             Daniel Verona
                    p
                    p    Composers:                   Katie Wolf and Reid Oda
                    p    Interface Development:       Katie Wolf
                    p    Sound Design:                Reid Oda
                    p    MalLo Creator and Developer: Reid Oda
                    p    Speical Thanks to:           Rebecca Fiebrink, Andrew Nelson, Erin Hartman, Letizia Gionfrida, Marc St. Pierre

            .ui-block-c(style='width:10%')
    #footer.center.ui-content(data-role='main')
        .ui-body.ui-body-a.ui-corner-all
            .ui-block-a
            .ui-block-b
            .ui-block-c()
                .ui-field-contain
                    button#nextPage.ui-btn.ui-btn-inline.ui-shadow.ui-btn.ui-corner-all.ui-mini(type='submit', onclick="nextPage()") Continue





