extends layout

block content
    script(src='/socket.io/socket.io.js')
    script(type='text/javascript', src='/javascripts/WebDrum/src/web-noise.js')
    script(type='text/javascript', src='/javascripts/WebDrum/src/web-ahdsr.js')
    script(type='text/javascript', src='/javascripts/WebDrum/src/web-drum.js')
    script(src='/javascripts/Sly/sly.min.js')
    link(rel='stylesheet', href='/stylesheets/sly.css')
    link(rel='stylesheet', href='/stylesheets/jquerymobile.css')
    script(src='/javascripts/WebDrum/src/web-ahdsr.js')
    script(src='/javascripts/WebAudioInstruments/Drum_Corp.js')
    script(src='/javascripts/WebAudioInstruments/Electronic.js')
    script(src='/javascripts/WebAudioInstruments/Pitched.js')
    script(src='/javascripts/WebAudioInstruments/Player.js')
    script(src='/javascripts/WebAudioInstruments/loadAudioFiles.js')

    script.

        var audioContext;
        var customIPflag = 0;
        var serverURL = 'http://localhost:3000';
        var customServerURL = '10.9.241.208:3000';
        var nPlayers = 3;
        var players = [];
        var instrumentPresets = [];
        var channelPresets = {};
        var nPresetChannels = 0;
        var nPresetInstruments = 0;
        var currentMode = 0; //make enum for different modes?

        //init sound stuff!
        window.addEventListener('load', init, false);

        if (customIPflag) {
            serverURL = customServerURL;
        }

        //socket to send/receive stuff from
        var socket = io(serverURL);//init the sound system


        socket.on('welcome', function (data) {
            console.log("got welcome message");// create the players

            //load JSON files:
            loadInstrumentsfile(function (response1) {
                //Parse JSON string into object
                instrumentPresets = JSON.parse(response1);
                nPresetInstruments = 0;
                for (var inst in instrumentPresets) {
                    nPresetInstruments++;
                }

                loadPresetsfile(function (response2) {
                    // Parse JSON string into object
                    var presetsJSON = JSON.parse(response2);
                    ch_index = 0;
                    for (var channel in presetsJSON) {
                        instr_index = 0;
                        channelPresets[ch_index] = {}
                        for (var instrument in presetsJSON[channel]) {
                            //may not have to do this... access using variables names...
                            channelPresets[ch_index][instr_index] = presetsJSON[channel][instrument];
                            instr_index++;
                        }
                        ch_index++;
                    }
                    nPresetChannels = ch_index;
                    loadDOMStuff();
                });
            });

            setInterval(function () {
                players[0].play(audioContext.currentTime);
            }, 500);

        });


        function loadInstrumentsfile(callback) {
            console.log("load Instr File");
            var request = new XMLHttpRequest();
            //request.overrideMimeType("application/json");
            request.open('GET', '/json/instruments.json', true); // Replace 'my_data' with the path to your file
            request.onreadystatechange = function () {
                if (request.readyState == 4 && request.status == "200") {
                    // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode
                    callback(request.responseText);
                }
            };
            request.send(null);
        }

        function loadPresetsfile(callback) {
            console.log("load Presets File");
            var request = new XMLHttpRequest();
            request.open('GET', '/json/channels.json', true);
            request.onreadystatechange = function () {
                if (request.readyState == 4 && request.status == "200") {
                    // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode
                    callback(request.responseText);
                }
            };
            request.send(null);
        }


        //when we receive a time response - do the time sync stuff
        var process_variance = 1; // todo: set to better value
        var est_measure_variance = 1; // todo: set to a better value
        var kalman_initialized = false;
        var kalman_filter;

        socket.on('time_res', function (data) {
            var receive_time = audioContext.currentTime;
            var smoothed_offset = 0;
            var instant_offset = data.serverTime / 1000.0 - (receive_time + data.clientTime) / 2;
            if (!kalman_initialized) {
                kalman_filter = new KalmanFilter(process_variance, est_measure_variance, instant_offset);
                kalman_initialized = true;
            } else {
                kalman_filter.input_a_measurement(instant_offset);
            }
            smoothed_offset = kalman_filter.posteri_est;
            // var text = data.message + " Server Time: " + data.serverTime/1000.0 + " send Time: " + data.clientTime + " received time: " + receive_time;
            // var text = "kalman offset: " + smoothed_offset + ", instant offset: " + instant_offset;
            //add message to console
        });

        //when we receive OSC infromation, make sound!
        socket.on('oscInfo', function (data) {
            var currentTime = audioContext.currentTime;
            var instr;
            if (data.address == "/left") {
                instr = 1;
            }
            if (data.address == "/right") {
                instr = 2;
            }
            var text = "Instrument " + instr + " at " + currentTime;
        });

        socket.on('error', console.error.bind(console));


        /*********** functions ***********/

        // init() probably occurs first (we think, but it's hard to know with the asynchronous
        function init() {
            console.log("in init");
            try {
                // Fix up for prefixing
                if (isAudioContextSupported()) {
                    console.log("Web Audio is supported!");
                    audioContext = new (window.AudioContext || window.webkitAudioContext)();
                }
            } catch (e) {
                alert('You need webaudio support - try another browser');
            }

            for (var i = 0; i < nPlayers; i++) {
                players.push(new Player());
            }
            loadAudioFiles();
        }

        function isAudioContextSupported() {
            // This feature is still prefixed in Safari
            window.AudioContext = window.AudioContext || window.webkitAudioContext;
            return window.AudioContext;
        }



        /*************** JQuery stuff *****************/

        /* Work on trying to dynamically create the sliders
         function generateSliders() {
         $(document).on('pagebeforeshow', '#three', function () {
         // Add a new input element
         var index = 4;
         var newRight = "rightItem" + index;
         $('[id="#m0-dc"]').append('<div label class="leftItem">NEW!</div>');
         $('[id="#m0-dc"]').append('<div class="rightItem" id =' + newRight + '></div>');
         $('[id=' + newRight + ']').append('<input type="range" name="slider-' + index + '" id="slider-' + index + '" value="25" min="0" max="100" data-track-theme="a" data-theme="a" data-popup-enabled="true" data-mini="true">');
         // Enhance new input element, unfortunately slider() function is not goinf to work correctly

         $('#three').trigger('create');
         });
         }
         */


        //Could use this at some point, but when?
        $(document).ready(function () {
            //console.log("Document Ready");
        });

        function loadDOMStuff() {
            //setup channels slider
            var $channels_frame = $('#channels');
            var $channels_wrap = $channels_frame.parent();

            var channels_options = {
                horizontal: 1,
                itemNav: 'forceCentered',
                smart: 1,
                activateMiddle: 1,
                activateOn: 'click',
                mouseDragging: 1,
                touchDragging: 1,
                releaseSwing: 1,
                startAt: 0,
                scrollBar: $channels_wrap.find('.scrollbar'),
                scrollBy: 1,
                speed: 200,
                elasticBounds: 1,
                easing: 'swing',
                clickBar: 1
            };

            //create our sly for the channels box slider
            var sly_channels = new Sly('#channels', channels_options);

            //Setup event listener for when a new item has been activated
            //eventName: Event Name
            //itemIndex: index of active item.


            sly_channels.on('active', function (eventName, itemIndex) {
                //Change the channel params if the currentMode is 0;
                if (currentMode == 0) {

                    //for each player load in the instrument presets
                    for (var i = 0; i < nPlayers; i++) {
                        //get the instrument index:
                        var instr = channelPresets[itemIndex][i];
                        //console.log("New Channel " + itemIndex +" Instrument Preset: " + instr);
                        var params = instrumentPresets['i' + instr];
                        players[i].setParameters(params);

                        //update the mode 2 sliders
                        $('#i' + i).sly('activate', instr);
                    }
                }
                //console.log("Channel Active Item: " + itemIndex);
            });


            //intialize the sly and activate the 0th box
            sly_channels.init();
            sly_channels.activate(0);
            sly_channels.reload();


            for (var i = 0; i < nPresetChannels; i++) {
                $('[id="ch_slidee"]').append('<li >' + i + '</div>');
            }
            $('#channels').sly('reload');


            //Create 3 sliders for mode 2!
            for (var i = 0; i < nPlayers; i++) {
                var $frame = $('#i' + i);
                var $wrap = $frame.parent();

                var i_options = {
                    horizontal: 1,
                    itemNav: 'forceCentered',
                    smart: 1,
                    activateMiddle: 1,
                    activateOn: 'click',
                    mouseDragging: 1,
                    touchDragging: 1,
                    releaseSwing: 1,
                    startAt: 0,
                    scrollBar: $wrap.find('.scrollbar'),
                    scrollBy: 1,
                    speed: 200,
                    elasticBounds: 1,
                    easing: 'swing',
                    clickBar: 1
                };

                //create our sly
                var sly = new Sly('#i' + i, i_options);


                sly.on('active', function (eventName, itemIndex) {
                    var id = this.frame.id;
                    var playerNum = parseInt(id.slice(1));
                    //if we are currently in mode 1 then update the instruments:
                    if (currentMode == 1) {
                        var instr = itemIndex;
                        //console.log("Instrument Preset: " + instr);
                        var params = instrumentPresets['i' + instr];
                        players[playerNum].setParameters(params);
                        sliderChange(playerNum, params);
                    }
                    //console.log("Instr " + id + " Active Item: " + itemIndex);
                });

                sly.init();
                sly.activate(0);

                //console.log("Arrange Presets for " + i + ": " + nPresetInstruments);
                for (var j = 0; j < nPresetInstruments; j++) {
                    //console.log("Append: " + j);
                    $('[id="i' + i + '_slidee"]').append('<li id = i' + i + '_' + j + '>' + j + '</div>');
                }
                $('#i' + i).sly('reload');

            }

            //set initial select boxes for mode 2
            $("#m0-select").val('0').trigger('change');
            $("#m1-select").val('0').trigger('change');
            $("#m2-select").val('0').trigger('change');


            $("#tabs").tabs({
                activate: function (event, ui) {
                    var active = $('#tabs').tabs('option', 'active');
                    if (active == 0) {
                        $('#channels').sly('reload');
                        currentMode = 0;
                    }
                    else if (active == 1) {
                        currentMode = 1;
                        for (var i = 0; i < nPlayers; i++) {
                            $('#i' + i).sly('reload');
                        }
                    } else {
                        currentMode = 2;
                        refreshSliders();
                    }

                    //Change the name of the mode title
                    $("#mode").html($("#tabs ul>li a").eq(active).attr('name'));
                    console.log("Mode: " + currentMode);
                }
            });

            //set initial open tab
            $('#tabButton1').click();
        }

        function sliderChange(playerNum, params) {
            console.log("CHANGE: " + playerNum + " " + params);
            //set active Instrument;
            var activeInstrument = params["activeInstrument"];
            $('#m' + playerNum + '-select').val(activeInstrument).trigger('change');

            /*
             switch (activeInstrument) {
             case DRUM_CORP:
             ("dc-pitch")
             params['nDrummers'];
             params['drumPitch'];
             params['dynamics'];
             break;
             case PITCHED:
             params['range'] = this.range;
             params['vibrato'] = this.vibrato;
             params['trippiness'] = this.trippiness;
             break;
             case ELECTRONIC:
             params['grunge'] = this.grunge;
             params['electronicPitch'] = this.electronicPitch;
             params['fatness'] = this.fatness;
             break;
             default:
             console.log("fell to the bottom of the getParameters switch statement (we should not have)");
             }
             */
        }

        function refreshSliders() {
            for (var i = 0; i < nPlayers; i++) {
                params = players[i].getParameters();

                console.log("REFRESH: " + i + " " + params);
                //set active Instrument;
                var activeInstrument = params["activeInstrument"];
                $('#m' + i + '-select').val(activeInstrument).trigger('change');

                switch (activeInstrument) {
                    case DRUM_CORP:
                        console.log("Reset player" + i + " drum pitch: " + params["drumPitch"]);
                        $('#m' + i + '-dc-size').val(params["size"]).trigger('change');
                        $('#m' + i + '-dc-decay').val(params["decay"]).trigger('change');
                        $('#m' + i + '-dc-pitch').val(params["drumPitch"]).trigger('change');
                        $('#m' + i + '-dc-drums').val(params["nDrummers"]).trigger('change');
                        $('#m' + i + '-dc-dyn').val(params["dynamics"]).trigger('change');
                        break;
                    case PITCHED:
                        $('#m' + i + '-pp-size').val(params["size"]).trigger('change');
                        $('#m' + i + '-pp-decay').val(params["decay"]).trigger('change');
                        $('#m' + i + '-pp-scale').val(params["range"]).trigger('change');
                        $('#m' + i + '-pp-vib').val(params["vibrato"]).trigger('change');
                        $('#m' + i + '-pp-trip').val(params["trippiness"]).trigger('change');
                        break;
                    case ELECTRONIC:
                        $('#m' + i + '-el-size').val(params["size"]).trigger('change');
                        $('#m' + i + '-el-decay').val(params["decay"]).trigger('change');
                        $('#m' + i + '-el-grunge').val(params["grunge"]).trigger('change');
                        $('#m' + i + '-el-pitch').val(params["electronicPitch"]).trigger('change');
                        $('#m' + i + '-el-fat').val(params["fatness"]).trigger('change');
                        break;
                    default:
                        console.log("fell to the bottom of the getParameters switch statement (we should not have)");
                }
            }
        }


        $.fn.serializeObject = function () {
            var o = {};
            var a = this.serializeArray();
            $.each(a, function () {
                if (o[this.name] !== undefined) {
                    if (!o[this.name].push) {
                        o[this.name] = [o[this.name]];
                    }
                    o[this.name].push(this.value || '');
                } else {
                    o[this.name] = this.value || '';
                }
            });
            return o;
        };


        $(function () {
            $('#saveButton').click(function () {
                //var str = JSON.stringify($('#m-form').serializeObject());
                //console.log(str);
                console.log("Save");
                var params = {};
                for (var i = 0; i < nPlayers; i++) {
                    params[i] = players[i].getParameters();
                }

                var str = JSON.stringify(params);
                //console.log(params[0]);
                //var str = JSON.stringify({'i1': params[0]});
                console.log(str);

                $('#result').text(str);

                socket.emit('saveJSON', {
                    str: str,
                });

                return false;
            });
        });


        //show or hide sliders for mode 3 depending on the selector
        $(function () {
            //Selector for ids that end in '-select'
            $('[id$="-select"]').change(function () {
                //get the id and extract the mallo id (m0, m1, m2)
                var id = $(this).attr('id');
                var playerNum = parseInt(id.slice(1));
                console.log("Select Player: " + playerNum);
                var malloId = id.slice(0, 2);
                //get the value for the child that is selected
                var nextpage = $(this).children('option:selected').attr('value');

                //show/hide based on the selection.
                if (nextpage == '0') {
                    console.log("Selected 1!");
                    players[playerNum].activeInstrument = 0;
                    $('#' + malloId + '-dc-size').val(players[playerNum].size).trigger('change');
                    $('#' + malloId + '-dc-decay').val(players[playerNum].decay).trigger('change');
                    $('#' + malloId + '-dc').show();
                    $('#' + malloId + '-pp').hide();
                    $('#' + malloId + '-el').hide();

                } else if (nextpage == '1') {
                    console.log("Selected 2!");
                    players[playerNum].activeInstrument = 1;
                    $('#' + malloId + '-el-size').val(players[playerNum].size).trigger('change');
                    $('#' + malloId + '-el-decay').val(players[playerNum].decay).trigger('change');
                    $('#' + malloId + '-dc').hide();
                    $('#' + malloId + '-pp').show();
                    $('#' + malloId + '-el').hide();
                } else {
                    console.log("Selected 3!");
                    players[playerNum].activeInstrument = 2;
                    $('#' + malloId + '-pp-size').val(players[playerNum].size).trigger('change');
                    $('#' + malloId + '-pp-decay').val(players[playerNum].decay).trigger('change');
                    $('#' + malloId + '-dc').hide();
                    $('#' + malloId + '-pp').hide();
                    $('#' + malloId + '-el').show();
                }
            });
        });


        //slider changes!
        $(function () {
            $(".ui-slider").on('change', function (event) {
                var id = event.target.id;
                var playerNumber = parseInt(id.slice(1));
                var value = $(this).text();
                console.log(event.target.id + " " + playerNumber + " " + value);
                var instrType = players[playerNumber].activeInstrument;
                if (id.indexOf("decay") > -1) {
                    players[playerNumber].decay = value;
                } else if (id.indexOf("size") > -1) {
                    players[playerNumber].size = value;
                } else if (id.indexOf("dc-pitch") > -1) {
                    players[playerNumber].drumPitch = value;
                } else if (id.indexOf("dc-dyn") > -1) {
                    players[playerNumber].dynamics = value;
                } else if (id.indexOf("dc-drums") > -1) {
                    players[playerNumber].nDrummers = value;
                } else if (id.indexOf("pp-vib") > -1) {
                    players[playerNumber].vibrato = value;
                } else if (id.indexOf("pp-trip") > -1) {
                    players[playerNumber].trippiness = value;
                } else if (id.indexOf("pp-scale") > -1) {
                    players[playerNumber].range = value;
                } else if (id.indexOf("el-fat") > -1) {
                    players[playerNumber].fatness = value;
                } else if (id.indexOf("el-pitch") > -1) {
                    players[playerNumber].electronicPitch = value;
                } else if (id.indexOf("el-grunge") > -1) {
                    players[playerNumber].grunge = value;
                }
            });
        });


        //creates the animation and activation for the navigation bar
        $(function () {
            $(document).delegate('[data-role="navbar"] a', 'click', function () {
                $('[data-role="navbar"] a').removeClass("ui-btn-active");
                $('.tabs-content').children().hide();
                $('#' + $(this).attr('data-tab')).show();
                $("html,body").animate({scrollTop: 0}, 500);
                $(this).addClass("ui-btn-active");
            });
        });

        $(document).on("tabsbeforeactivate", "#tabs", function (e, ui) {
            var reverse = ui.newPanel.index() < ui.oldPanel.index() ? " reverse" : "",
                    classes = "in slide" + reverse;
            $(ui.newPanel).addClass(classes).one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
                $(this).removeClass(classes);
            });
        });


        $(window).resize(function (e) {
            $('#channels').sly('reload');
            $('#i0').sly('reload');
            $('#i1').sly('reload');
            $('#i2').sly('reload');
        });

    #tabs(data-role='tabs', data-position='inline', role='banner', data-transition='slide')
        div(data-role='navbar')
            ul
                li
                    a#tabButton1(href='#one', data-icon='star' data-iconpos='bottom', data-ajax='false', name = 'Change the Channel') Mode 1
                li
                    a#tabButton2(href='#two', data-icon='star' data-iconpos='bottom', data-ajax='false', name = 'Change the Instrument') Mode 2
                li
                    a#tabButton3(href='#three', data-icon='star', data-iconpos='bottom', data-ajax='false', name = 'Build the Instrument') Mode 3
        div.ui-bar-a.ui(role='banner', data-mini='true', style='text-align:center;')
            h7#mode Change the Channel

        #one.ui-content(data-role='main')
            .form.wrap
                #scrollbar.scrollbar
                    #channel_handle.handle(style='transform: translateZ(0px) translateX(228px);')
                #channels.frame(style='overflow; hidden;')
                    ul#ch_slidee.slide
        #two.ui-content(data-role='main')
            ul(data-role='listview', data-inset='true')
                li(data-icon='false')
                    a(href='#') MalLo 1
                    .form.wrap
                        #i0_scrollbar.scrollbar
                            #i0_handle.handle(style='transform: translateZ(0px) translateX(228px);')
                        #i0.instr_frame(style='overflow; hidden;')
                            ul#i0_slidee.slidee
                li(data-icon='false')
                    a(href='#') MalLo 2
                    .form.wrap
                        #i1_scrollbar.scrollbar
                            #i1_handle.handle(style='transform: translateZ(0px) translateX(228px);')
                        #i1.instr_frame(style='overflow; hidden;')
                            ul#i1_slidee.slidee
                li(data-icon='false')
                    a(href='#') MalLo 3
                    .form.wrap
                        #i2_scrollbar.scrollbar
                            #i2_handle.handle(style='transform: translateZ(0px) translateX(228px);')
                        #i2.instr_frame(style='overflow; hidden;')
                            ul#i2_slidee.slidee
        #three.ui-content(data-role='main')
            form#m-form
                #m0-form.pop_countryBox(data-role='collapsible', data-inset='false')
                    h3 MalLo 1
                    .ui-field-contain
                        label(for='m0-select') Type:
                        select#m0-select(name='m0-select', data-mini='true', data-iconpos='left')
                            option(value='0') Drum Corp
                            option(value='1') Pitched Percussion
                            option(value='2') Electronic
                    .ui-content#m0-dc
                        label.leftItem(for='m0-dc-size') Size:
                        .rightItem
                            input#m0-dc-size(type='range', name='m0-dc-size', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m0-dc-decay') Decay:
                        .rightItem
                            input#m0-dc-decay(type='range', name='m0-dc-decay', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m0-dc-pitch') Pitch:
                        .rightItem
                            input#m0-dc-pitch(type='range', name='m0-dc-pitch', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m0-dc-drums') Drummers:
                        .rightItem
                            input#m0-dc-drums(type='range', name='m0-dc-drums', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m0-dc-dyn') Dynamics:
                        .rightItem
                            input#m0-dc-dyn(type='range', name='m0-dc-dyn', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                    .ui-content#m0-pp
                        label.leftItem(for='m0-pp-size') Size:
                        .rightItem
                            input#m0-pp-size(type='range', name='m0-pp-size', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m0-pp-decay') Decay:
                        .rightItem
                            input.ui-hidden-accessible#m0-pp-decay(type='range', name='m0-pp-decay', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m0-pp-scale') Scale:
                        .rightItem
                            input.ui-hidden-accessible#m0-pp-scale(type='range', name='m0-pp-scale', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m0-pp-vib') Vibrato:
                        .rightItem
                            input.ui-hidden-accessible#m0-pp-vib(type='range', name='m0-pp-vib', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m0-pp-trip') Trippiness:
                        .rightItem
                            input.ui-hidden-accessible#m0-pp-trip(type='range', name='m0-pp-trip', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                    .ui-content#m0-el
                        label.leftItem(for='m0-el-size') Size:
                        .rightItem
                            input.ui-hidden-accessible#m0-el-size(type='range', name='m0-el-size', data-track-theme='a', data-theme='a',min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m0-el-decay') Decay:
                        .rightItem
                            input.ui-hidden-accessible#m0-el-decay(type='range', name='m0-el-decay', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m0-el-grunge') Grunge:
                        .rightItem
                            input.ui-hidden-accessible#m0-el-grunge(type='range', name='m0-el-grunge', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m0-el-pitch') Pitch:
                        .rightItem
                            input.ui-hidden-accessible#m0-el-pitch(type='range', name='m0-el-pitch', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m0-el-fat') Fatness:
                        .rightItem
                            input.ui-hidden-accessible#m0-el-fat(type='range', name='m0-el-fat', data-track-theme='a', data-theme='a',min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                #m1-form.pop_countryBox(data-role='collapsible', data-inset='false')
                    h3 MalLo 2
                    .ui-field-contain
                        label(for='m1-select') Type:
                        select#m1-select(name='m1-select', data-mini='true', data-iconpos='left')
                            option(value='0') Drum Corp
                            option(value='1') Pitched Percussion
                            option(value='2') Electronic
                    .ui-content#m1-dc
                        label.leftItem(for='m1-dc-size') Size:
                        .rightItem
                            input#m1-dc-size(type='range', name='m1-dc-size', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m1-dc-decay') Decay:
                        .rightItem
                            input#m1-dc-decay(type='range', name='m1-dc-decay', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m1-dc-pitch') Pitch:
                        .rightItem
                            input#m1-dc-pitch(type='range', name='m1-dc-pitch', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m1-dc-drums') Drummers:
                        .rightItem
                            input#m1-dc-drums(type='range', name='m1-dc-drums', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m1-dc-dyn') Dynamics:
                        .rightItem
                            input#m1-dc-dyn(type='range', name='m1-dc-dyn', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                    .ui-content#m1-pp
                        label.leftItem(for='m1-pp-size') Size:
                        .rightItem
                            input.ui-hidden-accessible#m1-pp-size(type='range', name='m1-pp-size', data-track-theme='a', data-theme='a',min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m1-pp-decay') Decay:
                        .rightItem
                            input.ui-hidden-accessible#m1-pp-decay(type='range', name='m1-pp-decay', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m1-pp-scale') Scale:
                        .rightItem
                            input.ui-hidden-accessible#m1-pp-scale(type='range', name='m1-pp-scale', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m1-pp-vib') Vibrato:
                        .rightItem
                            input.ui-hidden-accessible#m1-pp-vib(type='range', name='m1-pp-vib', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m1-pp-trip') Trippiness:
                        .rightItem
                            input.ui-hidden-accessible#m1-pp-trip(type='range', name='m1-pp-trip', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                    .ui-content#m1-el
                        label.leftItem(for='m1-el-size') Size:
                        .rightItem
                            input.ui-hidden-accessible#m1-el-size(type='range', name='m1-el-size', data-track-theme='a', data-theme='a',min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m1-el-decay') Decay:
                        .rightItem
                            input.ui-hidden-accessible#m1-el-decay(type='range', name='m1-el-decay', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m1-el-grunge') Grunge:
                        .rightItem
                            input.ui-hidden-accessible#m1-el-grunge(type='range', name='m1-el-grunge', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m1-el-pitch') Pitch:
                        .rightItem
                            input.ui-hidden-accessible#m1-el-pitch(type='range', name='m1-el-pitch', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m1-el-fat') Fatness:
                        .rightItem
                            input.ui-hidden-accessible#m1-el-fat(type='range', name='m1-el-fat', data-track-theme='a', data-theme='a',min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                #m2-form.pop_countryBox(data-role='collapsible', data-inset='false')
                    h3 MalLo 3
                    .ui-field-contain
                        label(for='m2-select') Type:
                        select#m2-select(name='m2-select', data-mini='true', data-iconpos='left')
                            option(value='0') Drum Corp
                            option(value='1') Pitched Percussion
                            option(value='2') Electronic
                    .ui-content#m2-dc
                        label.leftItem(for='m2-dc-size') Size:
                        .rightItem
                            input#m2-dc-size(type='range', name='m2-dc-size', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m2-dc-decay') Decay:
                        .rightItem
                            input#m2-dc-decay(type='range', name='m2-dc-decay', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m2-dc-pitch') Pitch:
                        .rightItem
                            input#m2-dc-pitch(type='range', name='m2-dc-pitch', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m2-dc-drums') Drummers:
                        .rightItem
                            input#m2-dc-drums(type='range', name='m2-dc-drums', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m2-dc-dyn') Dynamics:
                        .rightItem
                            input#m2-dc-dyn(type='range', name='m2-dc-dyn', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                    .ui-content#m2-pp
                        label.leftItem(for='m2-pp-size') Size:
                        .rightItem
                            input.ui-hidden-accessible#m2-pp-size(type='range', name='m2-pp-size', data-track-theme='a', data-theme='a',min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m2-pp-decay') Decay:
                        .rightItem
                            input.ui-hidden-accessible#m2-pp-decay(type='range', name='m2-pp-decay', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m2-pp-scale') Scale:
                        .rightItem
                            input.ui-hidden-accessible#m2-pp-scale(type='range', name='m2-pp-scale', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m2-pp-vib') Vibrato:
                        .rightItem
                            input.ui-hidden-accessible#m2-pp-vib(type='range', name='m2-pp-vib', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m2-pp-trip') Trippiness:
                        .rightItem
                            input.ui-hidden-accessible#m2-pp-trip(type='range', name='m2-pp-trip', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                    .ui-content#m2-el
                        label.leftItem(for='m2-el-size') Size:
                        .rightItem
                            input.ui-hidden-accessible#m2-el-size(type='range', name='m2-el-size', data-track-theme='a', data-theme='a',min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m2-el-decay') Decay:
                        .rightItem
                            input.ui-hidden-accessible#m2-el-decay(type='range', name='m2-el-decay', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m2-el-grunge') Grunge:
                        .rightItem
                            input.ui-hidden-accessible#m2-el-grunge(type='range', name='m2-el-grunge', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m2-el-pitch') Pitch:
                        .rightItem
                            input.ui-hidden-accessible#m2-el-pitch(type='range', name='m2-el-pitch', data-track-theme='a', data-theme='a', min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
                        label.leftItem(for='m2-el-fat') Fatness:
                        .rightItem
                            input.ui-hidden-accessible#m2-el-fat(type='range', name='m2-el-fat', data-track-theme='a', data-theme='a',min='0', max='99', value='50', data-popup-enabled='true' data-mini='true')
    h2#result
    div(data-role='footer', role='banner', data-position='inline')
        h1
            .ui-grid-b
                .ui-block-a(style='text-align: left;')
                a#saveButton.ui-block-b.ui-btn-a.ui-btn.ui-corner-all.ui-shadow(data-role="button", style='text-align: center;', input type="submit") Save
                .ui-block-c(style='text-align: right;')





