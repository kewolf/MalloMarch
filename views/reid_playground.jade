doctype html
html(lang='en')
    head
        meta(charset='UTF-8')
        title Version 1
        script(src='/socket.io/socket.io.js')
        script(type='text/javascript', src='/javascripts/WebDrum/src/web-noise.js')
        script(type='text/javascript', src='/javascripts/WebDrum/src/web-ahdsr.js')
        script(type='text/javascript', src='/javascripts/WebDrum/src/web-drum.js')
        script(type='text/javascript', src='/javascripts/Interface/build/interface.js')
        script(type='text/javascript', src='/javascripts/MalloTools/KalmanFilter.js')
        script.

            var audioContext;
            var initialVol = 0.5;
            var soundDuration = 0.05;
            var drums = [];
            var numDrums = 3;
            var freqArr = []; //array of frequencies
            var snare1Buffer = null;
            var myDrum;

            //init sound stuff!
            window.addEventListener('load', init, false);

            //socket to send/receive stuff from
            var socket = io('http://localhost:3000');

            //
            socket.on('welcome', function (data) {
                addMessage(data.message, 0, 0);
                myDrum = new Drum(snare1Buffer);
                // Respond every second with a message including this clients' id sent (from server) and current time
                setInterval(function () {
                    myDrum.play(audioContext.currentTime)
                }, 1000);

                setInterval(function() {
                    checkSchedule();
                }, 5);
            });

            // here is a simple starter instrument
            var Drum = function(buffer)
            {
                this.buffer = buffer;
                this.n_drummers = 1;
                this.size = 0;
                this.decay = 5;
                this.pitch = 2000;
                this.dynamics = 0;
            };

            Drum.prototype.play = function(time)
            {
                this.source = audioContext.createBufferSource();
                this.source.buffer = this.buffer;
                this.source.connect(audioContext.destination);
                this.source.detune.value = (this.pitch - 2000);
                this.source.start(AudioContext.currentTime);
            };

            // Drum.prototype.schedule = function(time)


            // scheduling stuff
            var nPlayers = 3;
            var nextTimes = [-1, -1, -1];
            var lastTimePlayed = [0, 0, 0];
            var sleepAmt = 200;
            var tooLateThreshold = -30;
            var lookAhead = 10;

            function networkTime() {
                return audioContext.currentTime;
            }

            function checkSchedule()
            {
                for (var i = 0; i < nPlayers; i++) {
                    if (nextTimes[i] - networkTime() < lookAhead &&
                            nextTimes[i] - networkTime() > tooLateThreshold &&
                            nextTimes[i] > lastTimePLayed[i] + sleepAmt) {
                        intruments[i].schedule(nextTimes);
                        lastTimePlayed[i] = nextTimes[i];
                    }
                }
            }

            //Add message to the console if time > 0 then play sound for instrument for a duration
            function addMessage(message, time, instrument)
            {
                var text = document.createTextNode(message),
                        el = document.createElement('li'),
                        messages = document.getElementById('messages');
                el.appendChild(text);
                messages.appendChild(el);
                console.log(text);
                if (time > 0) {
                    playSound();
                }
            }

            //init the sound system
            function init() {
                console.log("in init");
                try {
                    // Fix up for prefixing
                    if (isAudioContextSupported()) {
                        console.log("Audio context is supported!");
                        audioContext = new (window.AudioContext || window.webkitAudioContext)();

                        loadSnareSound();
                    }
                } catch (e) {
                    alert('You need webaudio support - try another browser');
                }
            }

            function isAudioContextSupported() {
                // This feature is still prefixed in Safari
                window.AudioContext = window.AudioContext || window.webkitAudioContext;
                return window.AudioContext;
            }

            //play the sound by creating an oscillator
            function playSound() {
                var source = audioContext.createBufferSource();
                source.buffer = snare1Buffer;
                source.connect(audioContext.destination);
                source.start(AudioContext.currentTime);
            }

            function loadSnareSound() {
                var url = 'http://localhost:3000/audio/SNARE_BAD_MUTHA.wav';
                var request = new XMLHttpRequest();
                request.open('GET', url, true);
                request.responseType = 'arraybuffer';

                request.onload = function() {
                    audioContext.decodeAudioData(request.response, function(buffer) {
                        snare1Buffer = buffer;
                    }, function(e) {
                        "Error in decoding audio data: " + e.err;
                    });
                }
                request.send();
            }



    body
        script.
            var a = new Interface.Panel();

            var b = new Interface.Button({
                bounds: [.05, .05, .3, .9],
                label: 'toggle'
            });
            var c = new Interface.Button({
                bounds: [.35, .05, .3, .9],
                label: 'momentary',
                mode: 'momentary'
            });
            var d = new Interface.Button({
                bounds: [.65, .05, .3, .9],
                label: 'contact',
                mode: 'contact'
            });

            a.background = 'black';
            a.add(b, c, d);

        h1  This is the index, is the sound working?
        ul#messages

