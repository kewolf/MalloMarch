#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('MalloMarch:server');
var http = require('http');
var fs = require('fs');
var url = require('url');
var osc = require('osc-min');
var jsonfile = require('jsonfile');
var dateFormat = require('dateformat');
var Long = require("long");
udp = require("dgram");

var interfaceConstants = require('../public/javascripts/interfaceConstants.js');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//Create a socket io that listens on our server
var io = require('socket.io').listen(server);

sock = udp.createSocket("udp4", function(msg, rinfo) {
    var error, error1;
    try {
        contents = osc.fromBuffer(msg)['elements'][0];
        // console.log(contents);

        if (contents['address'] == '/time_req')
        {
            var client_send_time = parseInt(contents['args'][0]['value']);
            var return_port = contents['args'][1]['value'];
            // Send an OSC message back to the performer
            // var server_time = Long.fromValue((new Date).getTime());
            var server_time = (new Date).getTime();
            var server_time_float = parseFloat(server_time);
            var response = osc.toBuffer({
                oscType: 'message',
                address: '/time_res',
                args: [
                    {type: 'integer', value: client_send_time},
                    {type: 'double', value: server_time}
                ]
            });
            sock.send(response, 0, response.length, 6448, rinfo.address);
            // console.log("clent_send_time: " + client_send_time + ", server_time: " + server_time + ", server_float: " + server_time_float);
        } else
        {
            var divider = 1000000;
            var predicted_time = Number(contents['args'][1]['value']) * divider + Number(contents['args'][2]['value']);
            var send_time = Number(contents['args'][3]['value']) * divider + Number(contents['args'][4]['value']);
            io.emit('note_prediction', {
                path: contents['address'],
                predicted_time: predicted_time,
                send_time: send_time,
                velocity: Number(contents['args'][5]['value']),
                msg_id: Number(contents['args'][0]['value']),
                x_pos: Number(contents['args'][6]['value']),
                y_pos: Number(contents['args'][7]['value']),
                z_pos: Number(contents['args'][8]['value'])
            });
            // console.log("path: " + contents['address'] + ", send_time: " + send_time + ", predicted_time: " + predicted_time + ", current_time: " + (new Date).getTime());
            console.log("predicted_time: " + predicted_time + ", current_time: " + (new Date).getTime() + ", diff: " + (predicted_time - (new Date).getTime()));
            // console.log(contents['args']);
        }
    } catch (error1) {
        error = error1;
        console.log("error: " + error1);
        return console.log("invalid OSC packet");
    }
});
sock.bind(6450);

// Setup the mode for our interface
// Initial Values
var interfaceMode = interfaceConstants.InterfaceEnum.M1;
var isLoggerOn = 1;
var isConsentFormOn = 1;
var isSeqOn = 0;
var isMalloOn = 1;
var isMetroOn = 1; // used to communicate between numXconductor and performer
var currentBPM = -1; // get this from conductor - if conductor not setup than -1
var startMeasure;

var performerIPs = ["", "", ""];


// Emit welcome message on when the socket connects and set up our listeners on this
io.on('connection', function (socket) {
    // Use socket to communicate with this particular client only, sending it it's own id
    var address = socket.handshake.address;
    console.log("SEND WELCOME AND OPEN PAGE: " + interfaceMode + " url: " + socket.handshake.url + " id " + socket.id + " IPS:" + performerIPs);
    socket.emit('welcome', {
        message: 'Welcome!',
        id: socket.id,
        ip: address.address,
        port: address.port,
        mode: interfaceMode,
        isLoggerOn: isLoggerOn,
        isConsentFormOn: isConsentFormOn,
        isSequencerOn: isSeqOn,
        isMalloOn: isMalloOn,
        isMetroOn: isMetroOn,
        bpm: currentBPM,
        performerIPs: performerIPs,
        startMeasure: startMeasure
    });


    //TODO: TEST!
    socket.on('disconnect', function () {

        //check if it is one of the performers
        var ip = socket.request.connection.remoteAddress;

        for (pip in performerIPs) {
            playerNum = pip + 1;
            console.log("PIP: " + pip);
            console.log("performerIPs[pip]: " + performerIPs[pip]);
            console.log("IP: " + ip);
            if (ip === performerIPs[pip]) {
                console.log("Performer Disconnect!");
                //remove it from the array
                performerIPs[pip] = "";

                //send on message to make it available again
                socket.emit('performerUnselected', {performerNumber: playerNum});
            }
        }
    });

    socket.on('saveJSON', function (newSocket) {
        var id = socket.request.connection.remoteAddress;
        //var date = dateFormat(new Date(newSocket.dateTime), "dd-mm-yy_hh:MM:ssTT") //KT changed
        var date = newSocket.dateTime;
        var data = JSON.parse(newSocket.str);
        var LOGTITLE = "practice"

        data["ip"] = id;

        if (newSocket.type == "email") {
            var saveStr = id + "_" + date;
            var file = 'savedJSON/emails_' + LOGTITLE + '_' + saveStr + '.json';

            jsonfile.spaces = 4;
            jsonfile.writeFile(file, data, function (err) {
                console.error(err)
            })
        }
        else if (newSocket.type == "params") {
            var saveStr = id + "_" + date;
            var file = 'savedJSON/' + LOGTITLE + '_' + saveStr + '.json';

            jsonfile.spaces = 4;
            jsonfile.writeFile(file, data, function (err) {
                console.error(err)
            })
        }
    });

    socket.on('time_req', function (newSocket) {
        socket.emit('time_res', {
            serverTime: (new Date).getTime(),
            clientTime: newSocket.clientTime,
            id: newSocket.id
        });
        //console.log("Received Time Request from browser: " + newSocket.clientTime + ", Sending Response");
    });

    //for communication between server mastercontroller and audience interfaces:
    socket.on('serverChangedInterface', function (newSocket) {
        console.log("CHANGE INTERFACE: " + newSocket.newInterface);
        interfaceMode = parseInt(newSocket.newInterface);
        changeInterface(interfaceMode);
    });

    socket.on('flipLogger', function (newSocket) {
        isLoggerOn = parseInt(newSocket.loggerOn);
    });

    socket.on('flipConsentForm', function (newSocket) {
        isConsentFormOn = parseInt(newSocket.displayConsent);
    });

    socket.on('flipMetro', function (newSocket) {
        isMetroOn = newSocket.isOn;
        currentBPM = newSocket.bpm;
        flipMetro(newSocket.isOn, currentBPM);
    });

    socket.on('flipMallo', function (newSocket) {
        isMalloOn = newSocket.isOn;
        flipMallo(newSocket.isOn);
    });

    socket.on('flipSeq', function (newSocket) {
        isSeqOn = newSocket.isOn;
        flipSequencer(newSocket.isOn);
    });

    socket.on('changeChannel', function (newSocket) {
        changeChannel(newSocket.newChannel);
    });

    socket.on('updateAudienceParameter', function (newSocket) {
        console.log("Update Audience Param: Player " + newSocket.performerNum + " Parameter: " + newSocket.parameter + " Value: " + newSocket.value);
        updateAudienceParameter(newSocket.performerNum, newSocket.parameter, newSocket.value);
    });

    socket.on('updatePlayerParameter', function (newSocket) {
        console.log("Update Performer  " + newSocket.performerInterface + " Param: Player " + newSocket.performerNum + " Parameter: " + newSocket.parameter + " Value: " + newSocket.value);
        updatePlayerParameter(newSocket.performerInterface, newSocket.performerNum, newSocket.parameter, newSocket.value);

    });



    socket.on('saveEmails', function (newSocket) {
        //console.log("Server Saved Emails!");
        saveEmails();
    });


    // specifically for numX
    socket.on('performerSetup', function (newSocket) {
        console.log("Performer Setup!");
        var ip = socket.request.connection.remoteAddress;
        performerIPs[newSocket.performerNumber - 1] = ip;
        io.emit('performerSelected', {performerNumber: newSocket.performerNumber});

    });

    socket.on('performerTeardown', function (newSocket) {
        console.log("Performer Teardown!");
        performerIPs[newSocket.performerNumber - 1] = "";
        io.emit('performerUnselected', {performerNumber: newSocket.performerNumber});
    });

    socket.on('getPresetParameters', function (newSocket) {
        console.log("Get Presets for Performer: " + newSocket.performerNumber);
        io.emit('get_player_params', {playerNum: newSocket.performerNumber});
    });

    socket.on('updateTempo', function (newSocket) {
        console.log("Update Tempo!");
        updateMetro(newSocket.newTempo);
    });

    socket.on('sendStartMeasure', function (newSocket) {
        console.log("Send Starting Measure to Performers");
        sendStartMeasure(newSocket.startMeasure)
    });

});

function sendStartMeasure(measure) {
    startMeasure = measure;
    io.emit('startingMeasure', {
        startMeasure: measure
    });
}

function changeInterface(newMode) {
    io.emit('changeInterface', {
        newMode: newMode
    });
}
function flipMetro(isOn, bpm) {
    io.emit('flipMetro', {
        isOn: isOn,
        bpm: bpm

    });
}
function updateMetro(newTempo) {
    currentBPM = newTempo;
    io.emit('updateMetro', {
        newTempo: newTempo
    });
}
function flipSequencer(isOn) {
    io.emit('flipSeq', {
        isOn: isOn
    });
}
function flipMallo(isOn) {
    io.emit('flipMallo', {
        isOn: isOn
    });
}

function changeChannel(newChannel) {
    io.emit('changeChannel', {
        newChannel: newChannel
    });
}

function updateAudienceParameter(performerNum, param, value) {
    io.emit('updateAudienceParameter', {
        performerNum: performerNum,
        parameter: param,
        value: value
    });
}

function updatePlayerParameter(performerInterface, performerNum, param, value) {
    io.emit('updatePlayerParameter', {
        performerInterface: performerInterface,
        performerNum: performerNum,
        parameter: param,
        value: value
    });
}


// For playing and stopping the playback of recorded logs
function playLogs(logs, startTime) {
    io.emit('playLogs', {
        logs: logs,
        startTime: startTime
    });
}
function stopLogs() {
    io.emit('stopLogs', {});
}

//function for passing the osc messages onto our clients
// function sendPrediction(address, time, velocity) {
//     io.emit('note_prediction', {
//         address: address,
//         time: time,
//         velocity: velocity
//     });
// }

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
