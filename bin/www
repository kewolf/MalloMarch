#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('MalloMarch:server');
var http = require('http');
var fs = require('fs');
var url = require('url');
var osc = require('osc');
var jsonfile = require('jsonfile');
var dateFormat = require('dateformat');
var Long = require("long");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//Create a socket io that listens on our server
var io = require('socket.io').listen(server);

// Create an osc.js UDP Port listening on port 6449.
var udpPort = new osc.UDPPort({
    localAddress: "0.0.0.0",
    localPort: 6449
});


// Listen for incoming OSC Messages
udpPort.on("bundle", function (oscBundle, timeTag, info) {

    var path = oscBundle.packets[0].address;
    if (path == '/time_req') {
        var client_send_time = oscBundle.packets[0].args[0];
        var return_port = oscBundle.packets[0].args[1];
        // Send an OSC message back to performer
        var server_time = Long.fromValue((new Date).getTime());
        udpPort.send({
            address: "/time_res",

            args: [client_send_time, server_time]
        }, info.address, 6448);

        // console.log("client_send_time: " + client_send_time);
        // console.log("return_port: " + return_port);
        // console.log("IP Address of Sender: " + info.address);
        // console.log("server_time: " + server_time);
        // console.log("client_send_time: " + JSON.stringify(client_send_time, null, 4));
        // console.log("server_time: " + JSON.stringify(server_time, null, 4));
    } else {
        var time = oscBundle.packets[0].args[0];
        var velocity = oscBundle.packets[0].args[1];
        sendPrediction(path, time.toNumber(), velocity);
        console.log("time: " + JSON.stringify(time));
        console.log("got a note message from malLo " + path);
        console.log("path: " + path + ", prediction_time: " + time + ", current_time: " + (new Date).getTime());
        console.log("prediction_time: " + time.toNumber());
    }
});

// Open the osc socket for listening
udpPort.open();

// Setup the mode for our interface
var interfaceMode = '2';

// Emit welcome message on when the socket connects and set up our listeners on this
io.on('connection', function (socket) {
    // Use socket to communicate with this particular client only, sending it it's own id
    var address = socket.handshake.address;
    socket.emit('welcome', {
        message: 'Welcome!',
        id: socket.id,
        ip: address.address,
        port: address.port,
        numInstruments: 3,
        mode: interfaceMode
    });
    socket.on('saveJSON', function (newSocket) {
        var id = socket.request.connection.remoteAddress;
        //var date = dateFormat(new Date(newSocket.dateTime), "dd-mm-yy_hh:MM:ssTT") //KT changed
        var date = newSocket.dateTime;
        var saveStr = id + "_" + date;

        var file = 'savedJSON/' + saveStr + '.json';
            var data = JSON.parse(newSocket.str);

        jsonfile.spaces = 4;
            jsonfile.writeFile(file, data, function (err) {
                console.error(err)
            })
        }
    );
    socket.on('time_req', function (newSocket) {
        socket.emit('time_res', {
            serverTime: (new Date).getTime(),
            clientTime: newSocket.clientTime,
            id: newSocket.id
        });
        //console.log("Received Time Request from browswer: " + newSocket.clientTime + ", Sending Response");
    });
});


//function for passing the osc messages onto our
function sendPrediction(address, time, velocity) {
    io.emit('note_prediction', {
        address: address,
        time: time,
        velocity: velocity
    });
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
